?surf3d
?plot3d
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x, y)
plot3d(x, y, z, col = rainbow(1000))
?  surf3D()
# x, y and z grids
r <- sin(4*phi)^3 + cos(2*phi)^3 + sin(6*theta)^2 + cos(6*theta)^4
# x, y and z grids
r <- sin(4*phi)^3 + cos(2*phi)^3 + sin(6*theta)^2 + cos(6*theta)^4
X       <- seq(0, pi, length.out = 50)
Y       <- seq(0, 2*pi, length.out = 50)
M       <- mesh(X, Y)
phi     <- M$x
theta   <- M$y
# x, y and z grids
r <- sin(4*phi)^3 + cos(2*phi)^3 + sin(6*theta)^2 + cos(6*theta)^4
x <- r * sin(phi) * cos(theta)
y <- r * cos(phi)
z <- r * sin(phi) * sin(theta)
# full colored image
surf3D(x, y, z, colvar = y, colkey = FALSE, shade = 0.5,
box = FALSE, theta = 60)
X <- data$beta
X
x
y
dim(y)
dim(x)
dim(z)
z <- 0*x + 0*y
z
X <- data$beta
Y <- data$A_dens
M <- mesh(X,Y)
x <- M$x
y <- M$y
z <- 3*x + 3*y
surf3D(x, y, z, colvar = y, colkey = FALSE, shade = 0.5,
box = FALSE, theta = 60)
X <- data$beta
Y <- data$A_dens
M <- mesh(X,Y)
x <- M$x
y <- M$y
z <- 3*x + 3*y^2
surf3D(x, y, z, colvar = y, colkey = FALSE, shade = 0.5,
box = FALSE, theta = 60)
X <- data$beta
Y <- data$A_dens
M <- mesh(X,Y)
x <- M$x
y <- M$y
z <- 3*sin(x) + 3*y^2
surf3D(x, y, z, colvar = y, colkey = FALSE, shade = 0.5,
box = FALSE, theta = 60)
plot3d(data$beta, data$size, data$eigenvalue2)
library(plot3D)
?plot3d
x <- sort(rnorm(1000))
y <- rnorm(1000)
z <- rnorm(1000) + atan2(x, y)
plot3d(x, y, z, col = rainbow(1000))
?  surf3D()
names(data)
library(plotly)
# d <- data[sample(1:nrow(data), 100),]
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
names(data)
library(plotly)
d <- data[sample(1:nrow(data), 100),]
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'size'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
fig
if (require("PageRank")) {
library(PageRank)
}else{
devtools::install_github("ryangreenup/PageRank")
library(PageRank)
}
library(pacman)
pacman::p_load(PageRank, devtools, Matrix, igraph, mise, tidyverse, rgl, latex2exp)
#  mise()
if (require("PageRank")) {
library(PageRank)
}else{
devtools::install_github("ryangreenup/PageRank")
library(PageRank)
}
library(pacman)
pacman::p_load(PageRank, devtools, Matrix, igraph, mise, tidyverse, rgl, latex2exp)
#  mise()
p    <- seq(from = 0.01, to = 0.99, length.out = 10)
beta <- seq(from = 1, to = 20, length.out = 100)
sz <- seq(from = 100, to = 1000, length.out = 100)
sz <- 100
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
random_graph <- function(p, beta, size) {
g1 <- igraph::erdos.renyi.game(n = size, p)
A <- igraph::get.adjacency(g1) # Row to column
A <- Matrix::t(A)
A_dens <- mean(A)
T      <- PageRank::power_walk_prob_trans(A, beta = beta)
tr     <- sum(diag(T))
e2     <- eigen(T, only.values = TRUE)$values[2] # R orders by descending magnitude
return(c(abs(e2), mean(A), tr))
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
}
getwd()
setwd("/home/ryan/Sync/Studies/2020Spring/DiscProj/Report/")
data <- readRDS(filename)
filename <- "erdosData.rds"
data <- readRDS(filename)
data
pairs(data)
cor(data)
library(corrplot)
cormat = cor(data, method = 'spearman')
corrplot(cormat, method = "ellipse", type = "lower")
names(data)
plot3d(data$beta, data$size, data$eigenvalue2)
names(data)
library(plotly)
names(data)
library(plotly)
d <- data[sample(1:nrow(data), 1000),]
d$beta <- log(d$beta)
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
fig
if (require("PageRank")) {
library(PageRank)
}else{
devtools::install_github("ryangreenup/PageRank")
library(PageRank)
}
library(pacman)
pacman::p_load(PageRank, devtools, Matrix, igraph, mise, tidyverse, rgl, latex2exp)
#  mise()
if (require("PageRank")) {
library(PageRank)
}else{
devtools::install_github("ryangreenup/PageRank")
library(PageRank)
}
library(pacman)
pacman::p_load(PageRank, devtools, Matrix, igraph, mise, tidyverse, rgl, latex2exp)
mise()
p    <- seq(from = 0.01, to = 0.99, length.out = 10)
beta <- seq(from = 1, to = 20, length.out = 100)
sz <- seq(from = 100, to = 1000, length.out = 100)
sz <- 100
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
random_graph <- function(p, beta, size) {
g1 <- igraph::erdos.renyi.game(n = size, p)
A <- igraph::get.adjacency(g1) # Row to column
A <- Matrix::t(A)
A_dens <- mean(A)
T      <- PageRank::power_walk_prob_trans(A, beta = beta)
tr     <- sum(diag(T))
e2     <- eigen(T, only.values = TRUE)$values[2] # R orders by descending magnitude
return(c(abs(e2), mean(A), tr))
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
}
if (sum(abs(Y) != abs(Re(Y))) == 0) {
Y <- Re(Y)
}
nrow(input_var)
nrow(Y)
Y <- as.data.frame(Y); colnames(Y) <- c("eigenvalue2", "A_dens", "trace")
(data <- cbind(input_var, Y)) %>% head()
pairs(data)
cor(data)
library(corrplot)
cormat = cor(data, method = 'spearman')
corrplot(cormat, method = "ellipse", type = "lower")
names(data)
plot3d(data$beta, data$size, data$eigenvalue2)
names(data)
library(plotly)
d <- data[sample(1:nrow(data), 1000),]
d$beta <- log(d$beta)
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
fig
plot3d(data$beta, data$size, data$eigenvalue2)
plot3d(data$beta, data$size, data$eigenvalue2, radius = 9)
plot3d(data$beta, data$size, data$eigenvalue2, radius = 9, aspect = 0.5)
?plot3d
plot3d(data$beta, data$size, data$eigenvalue2, radius = 9, aspect = 0.9)
names(data)
library(plotly)
d <- data[sample(1:nrow(data), 1000),]
d <- data
d$beta <- log(d$beta)
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
fig
plot3d(data$beta, data$A_dens, data$eigenvalue2, radius = 9, aspect = 0.9)
plot3d(data$beta, data$A_dens, data$eigenvalue2, radius = 9)
plot3d(data$beta, data$A_dens, data$eigenvalue2, radius = 999)
plot3d(data$beta, data$A_dens, data$eigenvalue2, aspect = 999)
plot3d(data$beta, data$A_dens, data$eigenvalue2, aspect = 0.1)
plot3d(data$beta, data$A_dens, data$eigenvalue2, size = 0.3)
plot3d(data$beta, data$A_dens, data$eigenvalue2, size = 9)
plot3d(data$beta, data$A_dens, data$eigenvalue2, size = 99)
plot3d(data$beta, data$A_dens, data$eigenvalue2, size = 2)
plot3d(log(data$beta), data$A_dens, data$eigenvalue2, size = 2)
plot3d(data$beta, data$A_dens, data$eigenvalue2, size = 2)
plot3d(data$beta, data$A_dens, data$eigenvalue2, size = 2)
plot3d(1:length(data$beta), data$A_dens, data$eigenvalue2, size = 2)
1:length(data$beta)
plot3d(data$beta, data$A_dens, data$eigenvalue2, size = 3)
names(data)
library(plotly)
d <- data[sample(1:nrow(data), 1000),]
fig <- plot_ly(d, x = ~A_dens, y = ~trace, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'trace'),
zaxis = list(title = 'E2')))
fig
p    <- seq(from = 0.01, to = 0.99, length.out = 10)
beta <- seq(from = 1, to = 20, length.out = 100)
sz <- seq(from = 100, to = 1000, length.out = 100)
sz <- 100
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
p    <- seq(from = 0.01, to = 0.99, length.out = 10)
beta <- seq(from = 1, to = 20, length.out = 100)
sz <- seq(from = 100, to = 1000, length.out = 100)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
p    <- seq(from = 0.01, to = 0.99, length.out = 100)
beta <- seq(from = 1, to = 20, length.out = 100)
sz <- seq(from = 100, to = 1000, length.out = 10)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
p    <- seq(from = 0.01, to = 0.99, length.out = 100)
beta <- seq(from = 1, to = 20, length.out = 100)
sz <- seq(from = 100, to = 1000, length.out = 10)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
p    <- seq(from = 0.01, to = 0.99, length.out = 100)
beta <- seq(from = 1, to = 20, length.out = 100)
sz <- seq(from = 100, to = 1000, length.out = 10)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
random_graph <- function(p, beta, size) {
g1 <- igraph::erdos.renyi.game(n = size, p)
A <- igraph::get.adjacency(g1) # Row to column
A <- Matrix::t(A)
A_dens <- mean(A)
T      <- PageRank::power_walk_prob_trans(A, beta = beta)
tr     <- sum(diag(T))
e2     <- eigen(T, only.values = TRUE)$values[2] # R orders by descending magnitude
return(c(abs(e2), mean(A), tr))
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
}
if (require("PageRank")) {
library(PageRank)
}else{
devtools::install_github("ryangreenup/PageRank")
library(PageRank)
}
library(pacman)
pacman::p_load(PageRank, devtools, Matrix, igraph, mise, tidyverse, rgl, latex2exp)
#  mise()
p    <- seq(from = 0.01, to = 0.99, length.out = 40)
beta <- seq(from = 1, to = 20, length.out = 40)
sz <- seq(from = 100, to = 1000, length.out = 3)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
random_graph <- function(p, beta, size) {
g1 <- igraph::erdos.renyi.game(n = size, p)
A <- igraph::get.adjacency(g1) # Row to column
A <- Matrix::t(A)
A_dens <- mean(A)
T      <- PageRank::power_walk_prob_trans(A, beta = beta)
tr     <- sum(diag(T))
e2     <- eigen(T, only.values = TRUE)$values[2] # R orders by descending magnitude
return(c(abs(e2), mean(A), tr))
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
}
p    <- seq(from = 0.01, to = 0.99, length.out = 40)
beta <- seq(from = 1, to = 20, length.out = 40)
sz <- seq(from = 100, to = 1000, length.out = 3)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
random_graph <- function(p, beta, size) {
g1 <- igraph::erdos.renyi.game(n = size, p)
A <- igraph::get.adjacency(g1) # Row to column
A <- Matrix::t(A)
A_dens <- mean(A)
T      <- PageRank::power_walk_prob_trans(A, beta = beta)
tr     <- sum(diag(T))
e2     <- eigen(T, only.values = TRUE)$values[2] # R orders by descending magnitude
return(c(abs(e2), mean(A), tr))
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
}
if (require("PageRank")) {
library(PageRank)
}else{
devtools::install_github("ryangreenup/PageRank")
library(PageRank)
}
library(pacman)
pacman::p_load(PageRank, devtools, Matrix, igraph, mise, tidyverse, rgl, latex2exp)
#  mise()
p    <- seq(from = 0.01, to = 0.99, length.out = 40)
beta <- seq(from = 1, to = 20, length.out = 40)
sz <- seq(from = 100, to = 1000, length.out = 3)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
random_graph <- function(p, beta, size) {
g1 <- igraph::erdos.renyi.game(n = size, p)
A <- igraph::get.adjacency(g1) # Row to column
A <- Matrix::t(A)
A_dens <- mean(A)
T      <- PageRank::power_walk_prob_trans(A, beta = beta)
tr     <- sum(diag(T))
e2     <- eigen(T, only.values = TRUE)$values[2] # R orders by descending magnitude
return(c(abs(e2), mean(A), tr))
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
}
if (require("PageRank")) {
library(PageRank)
}else{
devtools::install_github("ryangreenup/PageRank")
library(PageRank)
}
library(pacman)
pacman::p_load(PageRank, devtools, Matrix, igraph, mise, tidyverse, rgl, latex2exp)
#  mise()
p    <- seq(from = 0.01, to = 0.99, length.out = 40)
beta <- seq(from = 1, to = 20, length.out = 40)
sz <- seq(from = 100, to = 1000, length.out = 3)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
p    <- seq(from = 0.01, to = 0.99, length.out = 40)
beta <- seq(from = 1, to = 20, length.out = 40)
sz <- seq(from = 100, to = 1000, length.out = 3)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
random_graph <- function(p, beta, size) {
g1 <- igraph::erdos.renyi.game(n = size, p)
A <- igraph::get.adjacency(g1) # Row to column
A <- Matrix::t(A)
A_dens <- mean(A)
T      <- PageRank::power_walk_prob_trans(A, beta = beta)
tr     <- sum(diag(T))
e2     <- eigen(T, only.values = TRUE)$values[2] # R orders by descending magnitude
return(c(abs(e2), mean(A), tr))
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
print(paste(round(i/nrow(input_var), 2)), " %")
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
}
p    <- seq(from = 0.01, to = 0.99, length.out = 3)
beta <- seq(from = 1, to = 20, length.out = 40)
sz <- seq(from = 100, to = 1000, length.out = 3)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
p    <- seq(from = 0.01, to = 0.99, length.out = 10)
beta <- seq(from = 1, to = 20, length.out = 40)
sz <- seq(from = 100, to = 1000, length.out = 5)
input_var <- expand.grid("p" = p, "beta" = beta, "size" = sz)
input_var
random_graph <- function(p, beta, size) {
g1 <- igraph::erdos.renyi.game(n = size, p)
A <- igraph::get.adjacency(g1) # Row to column
A <- Matrix::t(A)
A_dens <- mean(A)
T      <- PageRank::power_walk_prob_trans(A, beta = beta)
tr     <- sum(diag(T))
e2     <- eigen(T, only.values = TRUE)$values[2] # R orders by descending magnitude
return(c(abs(e2), mean(A), tr))
}
nc <- length(random_graph(1, 1, 1))
Y <- matrix(ncol = nc, nrow = nrow(input_var))
for (i in 1:nrow(input_var)) {
X <- as.vector(input_var[i,])
Y[i,] <-  random_graph(X$p, X$beta, X$size)
print(i/nrow(input_var))
}
data <-
\
getwd()
list.dirs()
list.files()
data <- readRDS(erdosData.rds)
data <- readRDS("erdosData.rds")
nrow(data)
pairs(data)
cor(data)
library(corrplot)
cormat = cor(data, method = 'spearman')
corrplot(cormat, method = "ellipse", type = "lower")
names(data)
names(data)
library(plotly)
d <- data[sample(1:nrow(data), 1000),]
d <- data
d$beta <- log(d$beta)
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
fig
getwd()
readRDS("erdosRe")
list.files()
readRDS("erdosData.rds")
data <- readRDS("erdosData.rds")
data
names(data)
library(plotly)
d <- data[sample(1:nrow(data), 1000),]
d <- data
d$beta <- log(d$beta)
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
fig
d <- data[sample(1:nrow(data), 1000),]
d <- data
d$beta <- log(d$beta)
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
d <- data[sample(1:nrow(data), 1000),]
d <- data
d$beta <- log(d$beta)
fig <- plot_ly(d, x = ~A_dens, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
fig
fig <- plot_ly(d, x = ~p, y = ~beta, z = ~eigenvalue2)
fig <- fig %>% add_markers(size = 1)
fig <- fig %>% layout(scene = list(xaxis = list(title = 'Density'),
yaxis = list(title = 'Beta'),
zaxis = list(title = 'E2')))
fig
