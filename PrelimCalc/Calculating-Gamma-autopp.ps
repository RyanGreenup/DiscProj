%!PS-Adobe-2.0
%%Creator: dvips(k) 2020.1 Copyright 2020 Radical Eye Software
%%Title: Calculating-Gamma-autopp.dvi
%%CreationDate: Fri Jul 31 04:21:52 2020
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: LMSans12-Regular LMRoman12-Regular LMRoman8-Regular
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Ppdf -o Calculating-Gamma-autopp.ps
%+ Calculating-Gamma-autopp.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2020.07.31:1420
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 872 2018-12-21 20:39:31Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.30, 2018/12/17
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/Power { %  a^b   latest ghostscript don't allow -4^-3.1
  2 dict begin	% hold all local
  /b ED
  /a ED
  a 0 lt % prevent something like (-4)^(-3.1)=> 1/(-4)^3
    { b 0 lt 
      { a b cvi exp }
      { a b exp } ifelse 
    }
    { a 0 eq { 0 }{ a b exp } ifelse
    } ifelse
  end
} def
%
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup xGridOffset add y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup yGridOffset add x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: l3backend-dvips.pro 0 0
%%
%% This is file `l3backend-dvips.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% l3backend-header.dtx  (with options: `header,dvips')
%% 
%% Copyright (C) 1990-2020 The LaTeX3 Project
%% 
%% It may be distributed and/or modified under the conditions of
%% the LaTeX Project Public License (LPPL), either version 1.3c of
%% this license or (at your option) any later version.  The latest
%% version of this license is in the file:
%% 
%%    https://www.latex-project.org/lppl.txt
%% 
%% This file is part of the "l3backend bundle" (The Work in LPPL)
%% and all files in that bundle must be distributed together.
%% 
%% File: l3backend-header.dtx
true setglobal
/pdf.globaldict 4 dict def
false setglobal

/pdf.cvs { 65534 string cvs } def
/pdf.dvi.pt { 72.27 mul Resolution div } def
/pdf.pt.dvi { 72.27 div Resolution mul } def
/pdf.rect.ht { dup 1 get neg exch 3 get add } def
/pdf.linkmargin { 1 pdf.pt.dvi } def
/pdf.linkdp.pad { 0 } def
/pdf.linkht.pad { 0 } def
/pdf.rect
  { /Rect [ pdf.llx pdf.lly pdf.urx pdf.ury ] } def
/pdf.save.ll
  {
    currentpoint
    /pdf.lly exch def
    /pdf.llx exch def
  }
    def
/pdf.save.ur
  {
    currentpoint
    /pdf.ury exch def
    /pdf.urx exch def
  }
    def
/pdf.save.linkll
  {
    currentpoint
    pdf.linkmargin add
    pdf.linkdp.pad add
    /pdf.lly exch def
    pdf.linkmargin sub
    /pdf.llx exch def
  }
    def
/pdf.save.linkur
  {
    currentpoint
    pdf.linkmargin sub
    pdf.linkht.pad sub
    /pdf.ury exch def
    pdf.linkmargin add
    /pdf.urx exch def
  }
    def
/pdf.dest.anchor
  {
    currentpoint exch
    pdf.dvi.pt 72 add
    /pdf.dest.x exch def
    pdf.dvi.pt
    vsize 72 sub exch sub
    /pdf.dest.y exch def
  }
    def
/pdf.dest.point
  { pdf.dest.x pdf.dest.y } def
/pdf.dest2device
  {
    /pdf.dest.y exch def
    /pdf.dest.x exch def
    matrix currentmatrix
    matrix defaultmatrix
    matrix invertmatrix
    matrix concatmatrix
    cvx exec
    /pdf.dev.y exch def
    /pdf.dev.x exch def
    /pdf.tmpd exch def
    /pdf.tmpc exch def
    /pdf.tmpb exch def
    /pdf.tmpa exch def
    pdf.dest.x pdf.tmpa mul
      pdf.dest.y pdf.tmpc mul add
      pdf.dev.x add
    pdf.dest.x pdf.tmpb mul
     pdf.dest.y pdf.tmpd mul add
     pdf.dev.y add
  }
    def
/pdf.bordertracking false def
/pdf.bordertracking.begin
  {
    SDict /pdf.bordertracking true put
    SDict /pdf.leftboundary undef
    SDict /pdf.rightboundary undef
    /a where
      {
        /a
          {
            currentpoint pop
            SDict /pdf.rightboundary known dup
              {
                SDict /pdf.rightboundary get 2 index lt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.rightboundary exch put }
            ifelse
            moveto
            currentpoint pop
            SDict /pdf.leftboundary known dup
              {
                SDict /pdf.leftboundary get 2 index gt
                  { not }
                if
              }
            if
              { pop }
              { SDict exch /pdf.leftboundary exch put }
            ifelse
          }
        put
      }
    if
  }
    def
/pdf.bordertracking.end
  {
    /a where { /a { moveto } put } if
    /x where { /x { 0 exch rmoveto } put } if
    SDict /pdf.leftboundary known
      { pdf.outerbox 0 pdf.leftboundary put }
    if
    SDict /pdf.rightboundary known
      { pdf.outerbox 2 pdf.rightboundary put }
    if
    SDict /pdf.bordertracking false put
  }
    def
  /pdf.bordertracking.endpage
{
  pdf.bordertracking
    {
      pdf.bordertracking.end
      true setglobal
      pdf.globaldict
        /pdf.brokenlink.rect [ pdf.outerbox aload pop ] put
      pdf.globaldict
        /pdf.brokenlink.skip pdf.baselineskip put
      pdf.globaldict
        /pdf.brokenlink.dict
          pdf.link.dict pdf.cvs put
      false setglobal
      mark pdf.link.dict cvx exec /Rect
        [
          pdf.llx
          pdf.lly
          pdf.outerbox 2 get pdf.linkmargin add
          currentpoint exch pop
          pdf.outerbox pdf.rect.ht sub pdf.linkmargin sub
        ]
      /ANN pdf.pdfmark
    }
  if
}
  def
/pdf.bordertracking.continue
  {
    /pdf.link.dict pdf.globaldict
      /pdf.brokenlink.dict get def
    /pdf.outerbox pdf.globaldict
      /pdf.brokenlink.rect get def
    /pdf.baselineskip pdf.globaldict
      /pdf.brokenlink.skip get def
    pdf.globaldict dup dup
    /pdf.brokenlink.dict undef
    /pdf.brokenlink.skip undef
    /pdf.brokenlink.rect undef
    currentpoint
    /pdf.originy exch def
    /pdf.originx exch def
    /a where
      {
        /a
          {
            moveto
            SDict
            begin
            currentpoint pdf.originy ne exch
              pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
    /x where
      {
        /x
          {
            0 exch rmoveto
            SDict~
            begin
            currentpoint
            pdf.originy ne exch pdf.originx ne or
              {
                pdf.save.linkll
                /pdf.lly
                  pdf.lly pdf.outerbox 1 get sub def
                pdf.bordertracking.begin
              }
            if
            end
          }
        put
      }
    if
  }
    def
/pdf.breaklink
  {
    pop
    counttomark 2 mod 0 eq
      {
        counttomark /pdf.count exch def
          {
           pdf.count 0 eq { exit } if
           counttomark 2 roll
           1 index /Rect eq
             {
               dup 4 array copy
               dup dup
                 1 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add sub
                 3 exch put
               dup
                 pdf.outerbox 2 get
                 pdf.linkmargin add
                 2 exch put
               dup dup
                 3 get
                 pdf.outerbox pdf.rect.ht
                 pdf.linkmargin 2 mul add add
                 1 exch put
               /pdf.currentrect exch  def
               pdf.breaklink.write
                 {
                   pdf.currentrect
                   dup
                     pdf.outerbox 0 get
                     pdf.linkmargin sub
                     0 exch put
                   dup
                     pdf.outerbox 2 get
                     pdf.linkmargin add
                     2 exch put
                   dup dup
                     1 get
                     pdf.baselineskip add
                     1 exch put
                   dup dup
                     3 get
                     pdf.baselineskip add
                     3 exch put
                   /pdf.currentrect exch def
                   pdf.breaklink.write
                  }
                1 index 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                2 index 1 get sub
                pdf.baselineskip div round cvi 1 sub
                exch
              repeat
              pdf.currentrect
              dup
                pdf.outerbox 0 get
                pdf.linkmargin sub
                0 exch put
              dup dup
                1 get
                pdf.baselineskip add
                1 exch put
              dup dup
                3 get
                pdf.baselineskip add
                3 exch put
              dup 2 index 2 get  2 exch put
              /pdf.currentrect exch def
              pdf.breaklink.write
              SDict /pdf.pdfmark.good false put
              exit
            }
            { pdf.count 2 sub /pdf.count exch def }
          ifelse
        }
      loop
    }
  if
  /ANN
}
  def
/pdf.breaklink.write
  {
    counttomark 1 sub
    index /_objdef eq
      {
        counttomark -2 roll
        dup wcheck
          {
            readonly
            counttomark 2 roll
          }
          { pop pop }
        ifelse
      }
    if
    counttomark 1 add copy
    pop pdf.currentrect
    /ANN pdfmark
  }
    def
/pdf.pdfmark
  {
    SDict /pdf.pdfmark.good true put
    dup /ANN eq
      {
        pdf.pdfmark.store
        pdf.pdfmark.dict
          begin
            Subtype /Link eq
            currentdict /Rect known and
            SDict /pdf.outerbox known and
            SDict /pdf.baselineskip known and
              {
                Rect 3 get
                pdf.linkmargin 2 mul add
                pdf.outerbox pdf.rect.ht add
                Rect 1 get sub
                pdf.baselineskip div round cvi 0 gt
                  { pdf.breaklink }
                if
              }
            if
          end
        SDict /pdf.outerbox undef
        SDict /pdf.baselineskip undef
        currentdict /pdf.pdfmark.dict undef
      }
    if
    pdf.pdfmark.good
      { pdfmark }
      { cleartomark }
    ifelse
  }
    def
/pdf.pdfmark.store
  {
    /pdf.pdfmark.dict 65534 dict def
    counttomark 1 add copy
    pop
      {
        dup mark eq
          {
            pop
            exit
          }
          {
            pdf.pdfmark.dict
            begin def end
          }
        ifelse
      }
    loop
}
  def
%% 
%%
%% End of file `l3backend-dvips.pro'.

%%EndProcSet
%%BeginProcSet: psfrag.pro 0 0
%%
%% This is file `psfrag.pro',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% psfrag.dtx  (with options: `filepro')
%% 
%% Copyright (c) 1996 Craig Barratt, Michael C. Grant, and David Carlisle.
%% All rights reserved.
%% 
%% This file is part of the PSfrag package.
%% 
userdict begin
/PSfragLib 90 dict def
/PSfragDict 6 dict def
/PSfrag { PSfragLib begin load exec end } bind def
end
PSfragLib begin
/RO /readonly      load def
/CP /currentpoint  load def
/CM /currentmatrix load def
/B { bind RO def } bind def
/X { exch def } B
/MD { { X } forall } B
/OE { end exec PSfragLib begin } B
/S false def
/tstr 8 string def
/islev2 { languagelevel } stopped { false } { 2 ge } ifelse def
[ /sM /tM /srcM /dstM /dM /idM /srcFM /dstFM ] { matrix def } forall
sM currentmatrix RO pop
dM defaultmatrix RO idM invertmatrix RO pop
srcFM identmatrix pop
/Hide { gsave { CP } stopped not newpath clip { moveto } if } B
/Unhide { { CP } stopped not grestore { moveto } if } B
/setrepl islev2 {{ /glob currentglobal def true setglobal array astore
                   globaldict exch /PSfrags exch put glob setglobal }}
                {{ array astore /PSfrags X }} ifelse B
/getrepl islev2 {{ globaldict /PSfrags get aload length }}
                {{ PSfrags aload length }} ifelse B
/convert {
   /src X src length string
   /c 0 def src length {
      dup c src c get dup 32 lt { pop 32 } if put /c c 1 add def
   } repeat
} B
/Begin {
    /saver save def
    srcFM exch 3 exch put
    0 ne /debugMode X 0 setrepl
    dup /S exch dict def { S 3 1 roll exch convert exch put } repeat
    srcM CM dup invertmatrix pop
    mark { currentdict { end } stopped { pop exit } if } loop
    PSfragDict counttomark { begin } repeat pop
} B
/End {
    mark { currentdict end dup PSfragDict eq { pop exit } if } loop
    counttomark { begin } repeat pop
    getrepl saver restore
    7 idiv dup /S exch dict def {
        6 array astore /mtrx X tstr cvs /K X
        S K [ S K known { S K get aload pop } if mtrx ] put
    } repeat
} B
/Place {
    tstr cvs /K X
    S K known {
        bind /proc X tM CM pop
        CP /cY X /cX X
        0 0 transform idtransform neg /aY X neg /aX X
        S K get dup length /maxiter X
        /iter 1 def {
            iter maxiter ne { /saver save def } if
            tM setmatrix aX aY translate
            [ exch aload pop idtransform ] concat
            cX neg cY neg translate cX cY moveto
            /proc load OE
            iter maxiter ne { saver restore /iter iter 1 add def } if
        } forall
        /noXY { CP /cY X /cX X } stopped def
        tM setmatrix noXY { newpath } { cX cY moveto } ifelse
    } {
        Hide OE Unhide
    } ifelse
} B
/normalize {
    2 index dup mul 2 index dup mul add sqrt div
    dup 4 -1 roll exch mul 3 1 roll mul
} B
/replace {
    aload pop MD
    CP /bY X /lX X gsave sM setmatrix
    str stringwidth abs exch abs add dup 0 eq
        { pop } { 360 exch div dup scale } ifelse
    lX neg bY neg translate newpath lX bY moveto
    str { /ch X ( ) dup 0 ch put false charpath ch Kproc } forall
    flattenpath pathbbox [ /uY /uX /lY /lX ] MD
    CP grestore moveto
    currentfont /FontMatrix get dstFM copy dup
    0 get 0 lt { uX lX /uX X /lX X } if
    3 get 0 lt { uY lY /uY X /lY X } if
    /cX uX lX add 0.5 mul def
    /cY uY lY add 0.5 mul def
    debugMode { gsave 0 setgray 1 setlinewidth
        lX lY moveto lX uY lineto uX uY lineto uX lY lineto closepath
        lX bY moveto uX bY lineto lX cY moveto uX cY lineto
        cX lY moveto cX uY lineto stroke
    grestore } if
    dstFM dup invertmatrix dstM CM srcM
    2 { dstM concatmatrix } repeat pop
    getrepl /temp X
        S str convert get {
            aload pop [ /rot /scl /loc /K ] MD
            /aX cX def /aY cY def
            loc {
                dup 66  eq { /aY bY def } { % B
                dup 98  eq { /aY lY def } { % b
                dup 108 eq { /aX lX def } { % l
                dup 114 eq { /aX uX def } { % r
                dup 116 eq { /aY uY def }   % t
                if } ifelse } ifelse } ifelse } ifelse pop
            } forall
            K srcFM rot tM rotate dstM
            2 { tM concatmatrix } repeat aload pop pop pop
            2 { scl normalize 4 2 roll } repeat
            aX aY transform
            /temp temp 7 add def
        } forall
    temp setrepl
} B
/Rif {
    S 3 index convert known { pop replace } { exch pop OE } ifelse
} B
/XA { bind [ /Kproc /str } B /XC { ] 2 array astore def } B
/xs   { pop } XA XC
/xks  { /kern load OE } XA /kern XC
/xas  { pop ax ay rmoveto } XA /ay /ax XC
/xws  { c eq { cx cy rmoveto } if } XA /c /cy /cx XC
/xaws { ax ay rmoveto c eq { cx cy rmoveto } if }
    XA /ay /ax /c /cy /cx XC
/raws { xaws { awidthshow } Rif } B
/rws  { xws { widthshow } Rif } B
/rks  { xks { kshow } Rif } B
/ras  { xas { ashow } Rif } B
/rs   { xs { show } Rif } B
/rrs { getrepl dup 2 add -1 roll //restore exec setrepl } B
PSfragDict begin
islev2 not { /restore { /rrs PSfrag } B } if
/show       { /rs   PSfrag } B
/kshow      { /rks  PSfrag } B
/ashow      { /ras  PSfrag } B
/widthshow  { /rws  PSfrag } B
/awidthshow { /raws PSfrag } B
end PSfragDict RO pop
end

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfHrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def}
bind def

 /pgfVrgb{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfArgb} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto }
bind def} bind def

 /pgfArgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1
add def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff
div 2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index
14 index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke
4 -1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1rgb{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRrgb} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2rgb{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfRrgb{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1
add def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def
/pgfcircy pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
8 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index
6 index sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff {
3 index 3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360
arc closepath stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4
-1 roll 4 index add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add
def /pgfcircy pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark
exch pop }bind def

 /pgfHcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 moveto dup 6 index lineto } bind def}
bind def

 /pgfVcmyk{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAcmyk} def /pgfdir { dup 0 exch moveto dup 6 index exch lineto
} bind def} bind def

 /pgfAcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 2 mul
1 add def 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff
div 3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div
pgfheight 12 index 12 index 12 index 12 index 18 index pgfdiff { 4
index 4 index 4 index 4 index setcmykcolor pgfdir stroke 5 -1 roll
9 index add 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6
index add 5 -1 roll .5 sub } repeat mark 19 1 roll cleartomark exch
pop }bind def

 /pgfR1cmyk{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRcmyk} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2cmyk{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setcmykcolor
fill pop}bind def

 /pgfRcmyk{ /pgfdiff 10 index round cvi 10 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 11 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 11 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 10 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
10 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
3 index 8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 3 index
8 index sub pgfdiff div 3 index 8 index sub pgfdiff div 11 index 11
index 11 index 11 index 17 index pgfdiff { 4 index 4 index 4 index
4 index setcmykcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 5 -1 roll 8 index add 5 -1 roll 7 index add 5 -1 roll 6 index
add 5 -1 roll 5 index add 5 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep
add def /pgfcircy pgfcircy pgfystep add def } repeat mark 18 1 roll
cleartomark exch pop }bind def

 /pgfHgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 moveto dup 3 index lineto } bind def}
bind def

 /pgfVgray{ /pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfAgray} def /pgfdir { dup 0 exch moveto dup 3 index exch lineto
} bind def} bind def

 /pgfAgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 2 mul
1 add def dup 2 index sub pgfdiff div pgfheight 3 index 6 index pgfdiff
{ 1 index setgray pgfdir stroke exch 3 index add exch .5 sub } repeat
mark 7 1 roll cleartomark exch pop }bind def

 /pgfR1gray{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx
exch def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade
{pgfRgray} def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx
pgfstartx sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb
exch def }bind def

 /pgfR2gray{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setgray
fill pop}bind def

 /pgfRgray{ /pgfdiff 4 index round cvi 4 index round cvi sub 4 mul
1 add def /pgfcircx pgfstartx 5 index pgfdiffx pgfdomb div mul add
def /pgfcircy pgfstarty 5 index pgfdiffy pgfdomb div mul add def /pgfcircxe
pgfstartx 4 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty
4 index pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx
sub pgfdiff div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def
dup 2 index sub pgfdiff div 2 index 5 index pgfdiff { 1 index setgray
pgfcircx pgfcircy 2 index 0 360 arc closepath stroke exch 2 index add
exch .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy pgfcircy
pgfystep add def } repeat mark 6 1 roll cleartomark exch pop }bind
def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

/preview@version(12.2)def

userdict begin/preview-bop-level 0 def/bop-hook{/preview-bop-level
dup load dup 0 le{/isls false def/vsize 792 def/hsize 612 def}if 1
add store}bind def/eop-hook{/preview-bop-level dup load dup 0 gt{1
sub}if store}bind def end

/preview@tightpage true def (compatibility PostScript comment for dvipng<=1.5

userdict begin/bop-hook{7{currentfile token not{stop}if 65781.76 div
DVImag mul}repeat 72 add 72 2 copy gt{exch}if 4 2 roll neg 2 copy lt{exch}if
dup 0 gt{pop 0 exch}{exch dup 0 lt{pop 0}if}ifelse 720 add exch 720
add 3 1 roll 4{5 -1 roll add 4 1 roll}repeat <</PageSize[5 -1 roll
6 index sub 5 -1 roll 5 index sub]/PageOffset[7 -2 roll [1 1 dtransform
exch]{0 ge{neg}if exch}forall]>>setpagedevice//bop-hook exec}bind def
end

userdict (some extra code to avoid dvipng>=1.6 unknown special: 7{currentfile token not{stop}if 65781.76 div }))
pop

userdict begin/bop-hook{preview-bop-level 0 le{7{currentfile token
not{stop}if 65781.76 div DVImag mul}repeat 72 add 72 2 copy gt{exch}if
4 2 roll neg 2 copy lt{exch}if dup 0 gt{pop 0 exch}{exch dup 0 lt{pop
0}if}ifelse 720 add exch 720 add 3 1 roll 4{5 -1 roll add 4 1 roll}repeat
<</PageSize[5 -1 roll 6 index sub 5 -1 roll 5 index sub]/PageOffset[7
-2 roll [1 1 dtransform exch]{0 ge{neg}if exch}forall]>>setpagedevice}if//bop-hook
exec}bind def end
 
@fedspecial end
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75FB8D5B00DB7BA78FBFC5B95E167C6
CFB9A2275128DDCE62E56BBF35D257EAE99D627535F8E5ACB4A4D3E1E6D9D24F
9CDD9F80028D37C9CB4067A28D41E879AF98739929DDADA413EE35894A6A5B14
CBB136548C4B00E47FA77732DBEA89E10E98CAED50DEC8AB2536A447F7D46D4C
63A99114EFD23133E2FB8243221A2E8AB1CB892DE716CA34CE544502ABC9526D
F48B0762B57F8AAF2E120D5DCD70D140B498BA43863C45D94E6642DD04CBDC31
0087B2FC75CAD18883113AAADF162B023352069DD1BDEF229E16DE8D008A4CCC
BC317B47BE42354627EC77B91564A034FF2F3B60508154B08981B62A2E9974E0
E9A46A3AAC7F87B1FD8620A5A695852F2FF71CD16FA34635B526265F1A635254
75398013F04B49F67164F03610FAAC41229306EA37B9DF6E8DEB1C6C2BDEC9E6
EADDEF6E99BC482289181D89CF74F9995B40E5C55FBC81DC7686AE740022F764
C49FE9B49A108931E3CB077A9C53C764DBB47C789C795E97A537F013BC2BC786
BDA32DCD5A856714ACD5D2BB98B011650B2A5D8B881D6854DA373B002BA279C6
0649618BE2D9B1E10DECA9090F66F089E4D7C6D8087016FCB998B95F194BC9B6
E95BA14850E251A4EFF1C66B148E036AFB7FF007F18AAB4CAA2CEDB34F65F327
D58731A241E11468BBA16BA3494A4E80FF16410385FF17A1444B2D1596343B25
64124D648B1E0955CDCCE027BC9F127F79622FEB3A6781181EAD3F02101364EC
FB540C0B2473F20BF05A8315BBC31178398C4DF5CA482F899FBE7654F08D93E0
29994A566CDDC866CD6A1CF5DA076F94B31AE4EDE8237218A12D5E9DEEB9EB26
7CE99EEF40ED1A5A247FA60A89A2EF6AB95CAE1FB119500650FAD0C18B03564E
B61A0D261812A3EDE5BF402542BD215541E3A478F0933EB129EAE44484E084BD
DE7D2CEEF5E54E2CBE14A20F56A27B70B9C7DCBE9300AA2826EF2D6E38C9EE32
60EAFD1C1B7E9CAE9EE810B4C7934D08C44E8A3EDCADDF8FCD6E289C19A7056D
A716700F391FBA6480099E8276173D443884AC0600329C607B7521B1C1C0F575
F4A979FF04F1B3C17864FBC8B92B77DFD068E53CC9111E290624DC39FB79FEFA
C07D2DA7DEC9642694ACAD9C980FC6F26BBC4B98AA0F9624D8678DDD10596E3F
55CAF2F4419B78FF39B929627428C3A6736D8777332C017A9411BF924DE0E40A
24B0E1B797094DDD8EA17A7A281D007F1F6EE3CB17E0FDB167D05506A96F7296
047E208835176F3154E8757A1C21857556EE412F4434E8062A9F9101ADD125A3
2195B8CB98C9B19235FE35E0DB6F1FBF31ABF448C9261B75BF1EB61260DEF86E
BD69F26D77A20B25BE10094D4C196E26034F2577471EF7CDEFD087BAFFC6C93A
F8FE338E70387B4F1BA2119F24E0AC14D6C89D60DBE2E17850FEEDA72C8A882C
F268AA853D036C7633EF1DA737CF40C5F170EDDCB3B5518E28C971EBFB43D842
99D336736B15B05591122AE51D1486E1F2FA31E9C9379F2B3440AEB83539438B
B83563DD61FA39B66B4DDCE39F3E590823590CD7C75BBE8B58EDC2F2ECB1E684
00C6706D29DF0BCA1B5C649CF209DAFA7619F27D165264869A4D5EC574FFF640
76FD6BE210178957E86D8B7303BF3EBF660879783E563E5FD42AFA2E2C523957
8183B066D5A65BAE4AB038087E40257C1FE6F484941D7387A2F92A69CAD3FFA9
AE559D3043D7128482D9ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A60FC
7025B92E55DD5D5897F13EDBB3356F9E2B9DE1FE09288B3217E226202117CFBE
3DE2C6DBFB0BB25BB13A128CECEF9D4D51001EF6E00C9CBA158724AC4352EBBD
4085CC2897C588A09FDB14647F570BBEE55DC7F2AED102A1134FD48A8C8480D9
137F359E6287C5369650A06422FB0B3B29ACF32F3DDCB4DF8B5AC385B0E99329
08C1050CB6DB39BB10C1F4D149305E6D442E7D8B58020A01C8A417B670A41F2E
B01A30F2AE8C73D83360E849EC83AABD17E084BFD0A3606D42EFBDAD44BB98A7
440207EC9597D409FBD1E6B2429DCC30846293BF3060E9CAE54A81D21AAF3BFA
BAFE773F095BA4D5A0F9607E25DC3137296CE1D8E2B8FB0DF6B5FB6D5C415495
635BDFF798B08041C566CF1D783EC7B15B4330A37FC9C1BF23CE45EF19471FC7
2472E528053EC041E396333C90480C82F2B80E740D5ACBCB0882F35AE8A3E3B1
FE3903A941EA20902C10B0C3E73DF25106052700653849C02805E1C56026FA71
302E87A45A22ED99B04853D66E5A22B56F79FEF73918B7CBCC65CA7DB3E410DB
1AB7AAF9B483A4DB3B333B158517971542915D70737B3F22C6A831A9821624AD
61DC8A0DE77A1F4BA087E7E54F4602592AEB49D4AEA40B81B7B653D90E146B6A
AA318E165C8353C9CC1F0927D73E21ECE52D9C3EA6DE3CE70352D2ABEC8E3DD4
CCF226A6829DF67E37A242C5E0FDF6AFCEBB0621A8ADE7553CCA3725FB707ED9
526ED054C471B82AA52B6C090D4C6C776B5610954A6E5471F8D8344C07DB8E45
BE34098668A5FB9DB4D49F3FC041809ACDA455C62A76B51D730D8B124BC6B76D
049B17736CD9E28DA73506142B6AA54FDFAC9050332212CD062A6B96FB18552E
DB51B991870A6E579DC68B52DF7F950CE1BDB15548CAD879752198F3A2141F1B
77DCD2B7DC83E662C19DDE6A5207ACEA1E0C78CBAA7A47C5F3D0C745262B88DD
F05E7E3C1682E8E90674B781EF298DBA6CB1758D22EE8A7680B01DAC100D3748
CA1BC047117E5E9AFBA7839CAE44964C974F08DB4C947F074F5B3644BB3F93D7
F96770C73499AC0AFC3E20F0BBDFA01502C9A1C30E9DF357529D99BD156464C5
D64ED5C7BE1C1DB9852E09F62BB22A3A51BEC8BB98DE63D6763E8225E9ACAEE7
9D813C62B96A7CD2247A269F53AC59E3E886BC531628CD9FDA87188135B3D6CE
0F2CC637A8F2EEEA4C05990EB23142620576551DC347BCB2302D5D5FCBBB04D7
7DC4955E84168F9AC6EA2E25C8C38B8A36B337C6925E0CB5BD963CB791E28CB5
4B37655D9DC3BCF1F660E8262CD10AA45C67562303483314B5B71B07C7F8C598
D226227FA8C178C10D90A2F26A639CF016B843ACE6B352A0B859AAEB15A52403
FBD562D284EFBCAF3553CC5A757FA50D53E6AF18AF09A1B9C4792EEAB445547F
698E0DC00CC722B65CBD277C5DF3B4B1275090B71A4D4B3B7961171D67F8F6B2
6EBA8AB37B5C35DB16D8B776255132DE99F3F4B7530A72C49503FC4D5C84291E
0740415B51E89FC1E4887D1912C7FFB218D23A08172BC11116C8028E77D0FE5A
DDEF0931C9EFBA2B76B78F6A90C0E44F8236F55938C3CE5A9EEAA8379EE7D879
D13C3E2D204512584029A7E941946AB7D45710ED4396C6C9816137832A56C48F
C89066B9FF63B80A84B36F75AD6D455B580A4BBE440839A54B385C9E4571C466
AF1C084F04AF31AB83EAEDA618C70F735DF746994341A37D17E8AE636315CE9D
47B1A020296D23FD0A59D6AD28E34849187D767EDE855B520ADFA07DACBEC45B
BF0C25F00DD94C798C8CF098F26C8AF48B458803BB26487C1391BD9A5B51F33D
505FE3ED168109F1F39AC5C3357E48CB38906275AAE8D8CBE9ACD7740ECA4A47
A985E2E16051FA4178F6557DFC8FEF287CB787EFF59E86B4A72A199F16F2C24D
D5A6AD833A4BA6F96FE67FE603F3DE0BC536C9A2A04B73CB2E4EBCF70184C5E1
D9C9E3DF6D0AB7F44E679E8518074632F6BB0639E2AA1DBBF34708FDB8092FE9
343274DA68CD751A72052D4FD983EB8C149E081333B2F0E0A54134F91D7B4ACA
E954658CFEB3FF04F3F9F42C57124BF3FC0BA485E050DF883E4B2767E236BE21
9FEC94EF94D9F2096E76F1C558F40812444C6F0F4DA995C8C03162375AEF5BBD
6BC3B250625E4B5C2B2BF9879F853460339AEFAF4FCC58EA396431BD4F95BD5F
6DA31DDC13D860842BAEC5EB5C217FC685C06C5AE447C991137584534EFDDE0F
7BBB3FAEB89D737F9FDD69B4EDADB476A1E588A8C8499A8917CAB23F00BC124F
D93096D1B365B754E3D03ABC8B3DA3F4F6C2DB54682F72DFB7E665EF36DBD3B8
9455CA9BFE2FE8ED26203A2B353C3C9C7AFCAA09793C8A74DA25396CBC1484DB
565607911498AE56FF61F2AAB48F1B954211AF0A38D6CAB3BCD6697C7E56C29D
62A325714D3FE8C3DC019CC01E8738CCA2596AB05857E4B8F9D6695EF332BD3B
AA9EE551A4B142DDC13600318F45CBE1BB1A6E0CCF1CD79182D3B235B457CA9F
B713822F634A96C5D1923710DB4B98B063FA07A5FFE26234C70FF6EF6CA2A853
FE0F76AB1ED5B97A1060D13911F4AC44FA5358837F7CC6ED863F0FCCE5F79065
D7AF0839F444CFE8AC2F2FF46DB2B95247BD8261F39BA12AD5E50433EF517BD0
FD04C73FBF1058A8907ED43B4C144BDAA3C4E6BE9637FC8BD3E94D6257BE1B7B
FB179A4479EBA92EF2EE4E7B73DD295274E1D416F7AD7338FB3116A3CFEB9E33
8EF0D7B0FA721D7D11990750232AB90B60DEF84924B838AE79C6689275697225
1698C73A825EAF77F8C38CA8468E616771E6C9093D7E3479B0DF3F3160EA2059
B5F7BFD55E90340B4244BADD57DA5902E2C08D00E814009234E2A36EFBD854F8
68BC9301D33D0203F8D1F59EBCE526B06B610DB1B028D29F838A52AEC3BAA982
56BFC6A306ACDD86AEFA6F4F2AFCE55BF27AFC96D93AE476AB15324149043E71
3261671835DDF163EA8D3DA7CB1F0514DEECC225301813E4ECE6D689B0A04229
04F28E6DD3CAF0134F9E19DF8F5ABD86CB0F8CDD3A059F2F3421FF99BCAC2D54
03D67B0DD5ADFC6174D559534155A42F6626A6E7CFC849FBFFBB17679ABA8C34
B1296EAACD7DA7010ADED0D6A83F04F396CE83F0549B1168EB7DA7468011420D
BE034D5AB67817DA21F12130B85DF957C636987F2ED81971E9FC729AFC1E778A
3C062A85C2282BC39C571BD45057FD09085730695ADEFF892B4307BB163A248F
9A2052CB8980119F3F2EFECCCF2C04B55F44FC0D155C1E04055D6F81AE5E20A9
E98ADD7649142C6CC2FCBD09F82ECF0716F5378A8C51C139D72816DA8B61E413
EDA36A71E7B6110CAFAC612E3E67F979E774BA9C7A580D605929D6D790A34084
7DD751CF51F14D89B269A940060FB0B603D3A2A6839C1C36A3CB55707A0663E4
D7346CE1DD000B51AB4A815FECF291D3E8F573EEBB83E6F9DECA82BEB3F58558
67B2B884E4A9A334BC95558E4C1A9D0B93E9A8C0D83CB8354B69357920BEE4A0
4E464B774D6CB4588DE10B3DAF9F7E546F6AFE62D85E8D25FC1A0039346F9156
82672DE85AE82551277388BDC62DE6FD1A3DB14805DB66731CE5CE34765A6E35
825C99CB7AFE5A873340B50AEE34371B1D7C90AFB517178C9DFE59CE8B036E3B
067B364E0F77D36DC299ABF128FE2511732602A5885A6CD283AD3C1C87F360F7
BFF771183B302FF55667390AF2E314BC8E0EF10504B5612395461652E3B2D6B3
BCCE3F5D699B3E2227DEF786D7BBDAA2A35EB13FD17790793B2B4A9E06AFC15B
8B1E7C3534BF816D19A02789F1E1BE623EDD5DAF54733EB1AD965E8A5A3ECEEB
F44790D57FFB857764A8EC459BFF61D9A893DA0177CAB77BB183F54581052B66
D6CB569F8C51F03E409DCE0717779DEA582740E49F088BEAD6E482EB87350926
910860A95DE4100D2A9BA91424DAD1802F2EC862FB85A143D7B299223ED85252
02C31B687F2C19136157C6D83B33313266F1BA8B9E065A0E64509902D75FF0EB
AF919567B7A1CDA5E14FEDA66F60059ACA0ECA3D597FBAD8C7EC31F3C1C46E5A
E79F74B3589EA1C34BC2A4827253F72CEBA7495FFD2989718F2A54E5D0EA1719
ACDE43012A2AAA1F71550220B035B6AE978341404C817414D0579308612AD113
219204CA43994CAA4671A6A97BD8C6807C21360D0C3F7742F47CBC2D74EF214C
0B15C50A9B5A26205F096D63762A9B14F267CE0337485EF58E37EEF30EAB487B
6E7AB230EBC988C382F594B4D4D4B92E6AEC4A9F07841FF93433615B89BA1272
6F5B01CD5715C6432452ECEC048DCD14814E47DC1226F723CE25814E30876470
F16C5E8F87F74CFB89CA99219C25478E0A63F78F3460EDD4F64B4D2A5B3E660A
B83C0CD1BB032CF0DDA97FD7C35218928C48545178CCAA9646C6C89D2FB89665
3CB3AF6C9466BF2240E2A71EBEA84FE2BA8B2BAD7C2F670BD9087F7531490409
D02F3D87BE05852F9C004219582D45949B8C3A7907A725B1DBB3F1A92E0A0456
D103AD819382A9EB1E201AD6F522AF0386A30A2693B607A67E0AEAA7E969E420
86DC576CE06532479E48E7E905FB5E8F9FC3DC5F258FE3C18E7464AFBB0B0757
2E4E438A2F1A4E37E0909724BDD52F4D4B98C4AD8E1A1528BD444DD1B0EFDA76
FCA43DA6DFF11E72D5BAA35CCDDAB44EBBC0C71C3FD43F21DBC6904AEE4B01DF
4F1005122C3B92BB93F4E9CA79A797C3A4F27AA9924D6616FC860CCAA3402216
64068B6E7C7CF2E2432A65BA21DBEB0A83FC660BEB3F1A3357D218276A5D0FA4
EADB3616CBBE98428D5D811FF6FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0
1148C302E8E3AAD1DD61DADD7A1FD82F0C2E744CC3B65AAC7C04E9646515EB8F
EF55DBF964A5C2AA9623B8674C8259A681E27E2C4AE26093689327A256571CE9
457E795AB6B63D78163F227F1385113B9D2A2F0C56DB55B7317231C2B2F371B1
559D8BEB245FFAA7955250F08E8F5B149E8F97D25635B98E9B51FE570826C75E
64296714597A74010F59376FB1AEB72D08E929E1630A7750DE134C6BC13E5AAF
A36ED9F7A8E5D9BECFBE4384E04B0D6FECCB0244DB29A8B801321969CD052FD6
1493FDA211564478C68C592E158DACD4D9005B983760C79C08C12658303A3F51
1EBE5F047EE68288BF3DE1225D981C287FA9BE1B690BA0F8059823BD2AB80BC9
DC78BD724DEDA7987A6DD44876D3FD2B0A21E719D5677DB0E64C7650DF6FDDAF
6038DA9D24DC1978AFD87934AF5BFEAC00EDE5DBDE3D585DB595D29361F8253C
26C37E09B4F87056EDD8C90917EEEB978E51957475B5717AC1BB4AEDD87AD40D
D35C3449819CCC9366AFE79A48A3BCA95DB66E5D14FE0A8C3FFFD51B5492DB49
BF8810AF0BDC54BB1D08740818CF45A63A694C8F8DC44FBA5607435A619684F5
02CF60F00AB8418D0C93AC7EAA9DF793A62FC3E0C50F55A84F67D932B8062860
39E75042D590F24D8FE9F50D35EC6FF30384385CF7C56DB4A483D83D7CDB2BA2
48A366D5E0651560A4BA2299074E853FEFDCE9480F0E55E126E1DE7E700FC3D2
2EC26F9B2761469B0EDEE8BA22F029985C6F5C6E52567706CB28468A9A6AD9F9
B873F1845718FCF81B2A15BF986954219C2577014CE55CEE9E4D5B2FC43C7447
A9605D5D86CC06E8029D4F57A392D2738F846305E8F3AE5B5E2BBC2F802F00B3
A75DE53FEBE1B7B9272A951A047119B40830A39909494E86AEE21694223DF5E4
A7198F31E2B8282BED7392C7BE2B61691EA52F310E0367BD918A9DB9077118A0
42EB52EB7800276E7502D8CB8A68A46889B0D2DAC7CE9E40D84F17B6ACCD8743
2BF87A6B87D3297452BA7EA1CA9EACEC454312EC1DCE09A40896B78BD1D5A73E
157AECB9F3F59C0D736946734C6DF70888665716037A35F574BB08A82641F363
6C82E2BB16E686C92C60EA329075C30D3F97A3214A478933678E9C5B2267C747
BAFD5934D95FBD2640BFF7E94C4C260BFD0FFF9D966F224AA72C22207BCA2267
52B21D21999E31A3DA1E51A3282038BBA7F7FC70987A57EC73E5A6B9508B48DD
49577EF2E015E8D9C0F64025C76E0550BC5D75F5C40F7C7768A67B861D5FC288
7F1635AACF2782022D039A8D49085ACB83B160C466909F562BD4C26A26BEE741
ECC847467858898AD528633F477B739EAAF07A516D86CC678FF6D5A199877F04
81B1BFA806A353E3270334E0880843F700FC1F6065FA37F248AE52A1FBA985A3
1F28AC72D636AE969256DC91944150153C99FBFF35539B5E3CEE76DF3204AEC1
961F654E12385D1EC21D1831C177FAC71FD55A5490C89142F2844CB7E6352B01
A07303DE29B299AF582319835E23408E414CE2299CD46784E6A7AE912C213D0F
380112FEBD737CFF6C1483C4520BA4A4B904A4031C519E155A116C14F576AEF6
6E86BF55B83AB07C8875DE7D96261C02AF3B27E36352F8DC981EF838587C80FD
855F1733F50F636A4C7426584812DA63B5F0B1E400E9F96CC34E7E2C3CCF88A5
17FE6F9C5FB51F8737E0EC21F7CD596D42A88458B89786C2F6D96AD2D415402B
06C2CBB2CB91B45D00DF27E5A47692A30A7D13527A7F3FDF0C07D30FB6436D58
753F6AE969F7207578FA40B7457C36BF9A0846A0C5007E8D72ACF2D32F854BE1
642416405BCCE8D41818D663AFDC9CD1C81B91D658B398D4C89F58C854451014
68001F40721E8DADDCBFCD8BC92D0D26A7DEDA6FE09F7DC39F9F2DE66A66190C
689A73A26C5E0137C208DCF1A7143359F8EE27AB1F3639B4C997B3FE3D863BD1
FE2D56BD513E5BE907EDBB61A117B7F1BDB61AE87F1906CFADE3EFCF095AA187
EE498BC5455C976C40C6E24D239FCFE9CAA763CD150D404C418B12590B6EEA0E
1A19CD139622317F5DFD2EFBD95A7589BAAD70364C33665F90E24D35581DA77D
776D1EEB96F837A3A2F5C501AF422A313B47DCEC7A019705E05AC514331F7A91
B4F74898E2FAD14576F81B1D688DD8F61B1E4450C0C994D2FA8F4EA0B31BC626
75775A139B54949665078867B4A024FC24B16AB6474F370F7F61C7A430AB2303
FC215B5B353C8B1D386CED0321AA1103F5F4CC57F15121A5265A4B316901E61D
0B6A13CBC0EB3B038B56DEB99AC4C60BB469AC2C2CDC1E415746055916E409D0
85688DEBC02A6E020EF5101E41C289C854F7452F28FFBCEDB0E2DEF7ACE89539
7DFAF366B982B1E79ADC6523109832853C664B53C4ECDF81B0004DBE82B86F5B
A36A3B2DE83040B16BFFBBEB73850E2199B8D101C85CBAF179EC5881CEBF7EBC
3B30AC8AEB18B09AC7183771066ECCF26590A7894CA6F91AC2CF4A1420693935
9518C6B25D2C97192E8E1F0AE8D3882052CD47181C522E1F417F28A12064034A
7290750EBC897F11987CE12AC4C09643CB0B9D921B4A6980F6B22FE3C7B7CF63
57CCAE079ED34837B5A08E55E6319BE14383542B9F6500CD29B4760D5B4C77D2
5AE31C4A75BD8C7EB02722DA8D894241446F05FD5DB3815F144E1EFB2D400AD0
25F1AD7295D531787D2C5D4E00A09F155BFDF971B5A4D0AC102C2CE8A28E1A82
794BABD4D8814B53865E03C0C0D6DE7B16FE54A2CD42AEA5FAB6694A64B334CB
750BB6A4D0230ADC13EBBF5AC7571B0778C0E9D25358DA06B20DDF35F409AF15
997127DFFA9ABFF8C858A51C83CCCC572024A6243D6BC209B8D579F6A057A27A
EF243C4B389CCF9382BA5143D6359D3BA2ED407299B5C9E361C08AA256350ECD
82F3B38BD30286E0A8B3E42F7CBEC366E60C18416B956C6377E02A43FDBC78E4
627ED79B16862D939F3A3000659AC050E7001000B2C6848457D632AF0F1DCFFB
6E5F5F586F3A72BC1E72A5F984E7235607EC39E49ECCE85A8E75B8B18D8D9B9D
2227C7649133EC6A81002AE7A4E697857358F58A400549BAA570F95B97AE0BC5
7BB244A80105AEAF034D50D17F2A2913B639720FF4675597704DB7721A0FB87B
BE7530ED3C037A517E7F4D92C7AB7A2B373039EBD068D131C7F302A2F9FB65EC
CCAD4616927004178B7B2CE55A8F36653841CD79FD3514557D69140D6E7E9813
2DE2FD992965837E604A8B2C51E4FA23D38F0387351BEFEAE26D641D49B7A349
0F09BF16B8D179FC176D0735CAD73632F8EE970DC0EBA43D2C700A1D58F29F7E
F1487F54EB23A1CE0AB8CB768EDF04DBF511A3BEB1869F9D5F0086E13F8C3349
8D55FB08ED70950200C50B7E71F8C21BA46E833E6C0DCF6556C1CC6A1C88ED2C
49C1700E8AC2E1EE384B0F6907DA0232BF5153AD600D17DE2777D5CC84335A77
6EC13A25F0B85F0EA2FB526C4A6975188599D789CE1B95719560247100F68FEC
756F7AA110B22AE36B9518755C2FAC2135E89AF71192E8CC3776F553A88FD966
801A249712B98F8F6684D7361A1286AF3E4083CC9E64F40A500F045A27CDFAEF
A66D28B966E7D491B5803E4E32D24FDE0B7C56732957AC35E7CEA2C1AA00C6C7
57576EA0E4C8F0F14614231A275836A622235EADEE4F56A388398B1E3B8EF7D9
F110CEE189C26CAAF7990882F149552ACBF1101C0CC34540AFE14778BB219B59
B3BB99066BCDDBD6A90DADFDC11833C934EC4E446C77F005D897D944251600E7
A6B304DD76E088EF97077EDE26FD1456F4EA599CF4C4B22F65104F6D0D96CEB9
463A89A504AB57C377BB062C02225DCA03E6485C035C6247166107D6C1A4FAF9
AE46BCF6A6475B4197423EF9DE9959CC5CDE05CA9B914F8749608248E964F913
5155384A2C0EF7347C378B111AD792A90E38E1552BA4D6E36C5AD7B56F4A5D0C
F8FE219670A817942121C56A6E64555EBD682B2A587F38458944A0E355F989A6
D77EA1E24367EB14A7D28DAC9A22E2DF55C42D244D9DB91ADAB25927B9001E6A
DAAB86BA6B2B4E28F3C65566E2DF0AB84140F348449C01E851C4736321D6DFCE
20133ADC7C1C76B14667721A220ED3DAAF96F20E29D2F08BB07743827690BF7B
6E45B4F8674A6FA270F14B4944F276428753AFF93D541651CD027D5B23BE4FC8
6005E73CF2508994E2244B800EA15AF8C16B9B8329E91644DB1EACF0C0C781C4
F4C411F79B1D23A87ADA31D3A48C7190B618659D7D0B64A40FC4773482AF8C73
85F80E163B9463C38F611AF4987F7203DDCE93170428CB54EFDA16BCA724284A
ECC3A2904C546D6F2ED297BD3D3A359F69CD6D9D92F5265392E03264AE22D81E
75A04AE68344A9F152859C697E93BC968A3F78C8604FB03A0AF394E19A0E50D8
A50838734E691BC16C50353B2441985488F0E70612603E3F0722046046DC94B5
017D456E865FB2E416C4E91494CB6FB74220158EBAAD27211EB43A348E7E1F83
87334F443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA068799547812B285C06
A7820642245A91B895E018395581C536C3CA5680F622117252D1D72A6D9D057A
413F73C7FEA1993B5020F8574CE0C8B6FCE43E382AA3BBE0CAF9620ED0ECBE98
14BD19184B2C0F3B04B2D3ADE2358EEB27274D7B30DD69E1B2C3CA70F2F79FA2
9543F526BE2A04C6309DD3E47CF1FA44EFBAA756B02E839A6105021CA9B728D2
7C8018BECD829ACB6C3D9129E976A2427E1611066E0025917D1BDB7E9E37AD93
5833B94133FD5C6E5F76EBABE1C94999A54BC260661FD4DCE55956FA246836DD
DB17F52681C14DE689A8C6F2576DB779DA5064C8743100C8DA1A4DF6C8B7B019
CC31279CD27DDA52E1DA4CB052C16E049D2E6645239263D0B6E6419174661478
75F99B35930AAA74A477AFE29B1DAD0E6BD33735C477FB9BBFF2EB908D91B245
11AC525E15EA2EB389640906449D7A0A2979BBD6460F393365098CA717F915EC
27ACD59D2F35DDD0320956D2148DC7C2D7EFE859F41ED2661FFEFE5493FBEA5F
B1D26743416B6D20BA817AB49C66552CF7FEF8C99C29BD310590E1B613AAB89F
20B39C67B801932612BE59E8C4EA4B47A39D9D73EA96FEF2811F36BB337D4E9D
38D33E46E3F79F2BC92D811CC6DAB392EA379D23BED8DCA6132D76C53B78A28B
C434AF4C963E047E7CA794F2C7E845FC08034E600A9A20EDAEE67F65EBA7C2C6
1AFE1C7FD58404CCF6E173D56F8D3D3CCEC06A27BB12FF9B399DB1AF4BA9A570
5502F55E4CCF7160C54F7BC202236296A9052306639F4672E90E3B9DDE5FB364
F7BD728B86D3BBE1E37BC2104E79747402361416DDB4C1AD10889CB7851699BF
FD28D02FF638853114464CF170F3EAFC1572D2E56F2F0F692831903D20979257
C35CA8E92DCD33C7DD73FBAFAD2A3EC3AD445193BEC19A3ADD031C747FA67225
34BA34991AF3F1BF309ADE33C2780E971D3952648BE3ACB42BEC6D5B5DA0CAF1
9B5792A3F832853CB465BB8B66C50948800458912B40D3D1C93BFF447255A99C
CE4EC0E8B418284452650AC9F595D065353A0D84229C2226465DBD27291A7AAD
14E946490AEED2FF28FF48234265B4759B50D24BD711DAC55620DCFDC63493D8
B9EF33711947B65B0C07BB7FE129E074482B62CA26EA8970DCA4F35C139CBABD
4FFCF1E22865F11E640D484E5F57C00B1336A8F61DE8919B9F5A5D3533D903B8
948753E873822FF2E1C8DE9834854FF2955EDC15456438FED1B333FC882FEA17
CE5ECA50FE1EA7907A9A79564DBFFF9566BEA8DFAD1CD13FE4F4BD5FE272043A
59FBC65D5C5FFA73F59AE22BC7A9DE94C8D7D03ADE5D6DC0252CA2E3EFEDE150
916661FEF85C14B05424C0C51BC3E784E53A157C5192135A7055198A66789574
CA9DE18D9CD69BDDB4707F7B2C827516C1A6B49353FB7457EE57EF5908241374
2A4CD1BB78156D5809A689085E5EABA02F60389E94F86AAAF2B7E9E315B157F8
BE66C4AE3F0F649948253EC51D98A20B1C4150AECE1B644EF4F9B15154D3FF75
4428AE15D0D7F8837386F411D0FB2C1CEA22C286B7F058E8F48EBFC36AAD3511
F899A93419E74B4EEADDE0FE0B5D86C9538B9E3260EB814969E2E48645E1F5AC
047A8204F464CF29A60BA4DEAE3FFB984843DAA8E9420BDA882054B68A169C3E
54FF994669E0E0A4CD33F1B71EA3C7C787E612AFFBFDBB75E53941B46165FF34
0CEC0051A4EEF6A495823192E78065FD6060A0F7D8ECB4EBAE515878A31F197F
D069F443133F6271A817B670A41F2EB01A30F2AE8C73D83360E849EC87FE9711
CE71D9034EE8704CED9534746FB31E330BE53B043CBB36B38CE86196A8838829
AA72E7DAB35155314A35C56475A9CC8CC6267A6C8B55512546ACE6437740E677
EE22A40C38BB1F69F691122BFE48E6FE4003BED0D4270A59532C46091584E9CF
7759EF3E2FBBC0EE740CD2622E599A513A5A5F8F39BBA8D08AEB6465A1FB1258
980913106DE9470F037FDD15E6113A181DCB5104577F6303D8AFFF0D1623C49F
3A52C4EDA18B7B6BE5C494D3BE6EED741DC2B9D578DAF502D940AEA08876BE07
1C01DBADD0EBFBC4FF52507C34739FC6E798467FB71DAC5EFFE0D7BBC8114201
E03961015596BFDCD08FBB40B1153AB6626767FF1A48838221A3FAB6E8027A10
873C04482CAC5129F1D102860A54D8E656ECEA88768396EFEC282DC3DA70208D
6884BBFA2D4ADA174645BF47E448B703ADBAAB9F0DF2A0805C9B140D8CEB4474
0442AC4891051195B0B6624F3DB00520FF4657F7D127A24EB69B4ADCA04C25DD
A90364C4462F8DF7B588398EA6C9D82EC5A2888F03FD399BAAA3890E4F95DAA8
3D88BC9BF79C0F2F5A0752A8DC4E816B78B9EE734118C991282B1240D3E46337
C1FB2DB53C79D16B085D8400FFC9324014BE2A1D5CF3A0CC22E480CD066D1019
6C05A0EFD97EE57F50C5A59D1EC020C2C04DFC9F36C8253C4346DBC11A9D851D
A3A8E0D478DFDC64095D442198D9D530581F1C40D357CB03A7FBC28AB07B83B1
800E41C9104A62A074B44B977A4E4A9974A30FD61E80F89DE77282D37856765A
2E3980461481535061B2CC994D41EF6AC07B567DA70D25CD23C25C7D0B103312
B17D16087D670D7F854D5740F601C12493300841AF0F3A67E1E6093BE6DCB400
BDF8C5B29940B3CD12C56C7856D4B0ECD4E415CC9290C79FE24F1ED92BA45398
9EB7CE1FEC9D31E66BB00C09B952A829C5F56AE313967A0B57292667588D0A60
A045AE5775EFA566735F30BF915A60F7C027C153000E975E7513D0156C73F7F1
6C034A24BA4FA16E84B73917E43FF456B5C435C17071907E4739469EFE5675C0
FE6A19FEC026975039D81B532DE5BF0DA704808D7B0878A09BF1DCA721854AB3
AD69C48B50DDF960297D39DF2B708BEF605075EE12D7754830200D0EF7CB139D
07454666A9757CAF11889CBE919842FE4D30A9DF8ABD4B79FF6BFA7B048F1F20
3BF39512086211B6ED4A0CFB76CF072638DC21405F5C12971456BA64A3519849
2E0C81D7EC5306E4ED168682A02519583C8A4D3449A80F06DD05E185FC24E756
14597763D2683A5DA582CD0C910FE12D8CD6A6C6A3E4A1518E2BCDF099DA7A65
D2DA2A30960687F2DCF03E8EC3B3355440F8790D36B3FC528CCA877F264F9CD0
A9842A9410A0895DF75E1D19AFEEA0B92BC6D1851F9133071CFF77F6B7BB47F5
FA2D280B99D60757CB814F513009C4F8EA0E7C610D9815F6C9E2E43707530FF4
46F58B37C73CF2857A7ABB31EFD03F4B11BB195452F6D1A1689A2BBAE0007448
F08E8852AA459B4B19F3D15F6C7215840AB673F35C1710F16152A964659C8624
1FE188A2B151D9D4FBA51E499C40A5F15786F4013542378934CE6745950AC10A
8C4A87987B83CE610E61CF5F7C8B1546B7A57002CB5631ACEA320C6437B07E0D
6E591ABD90B6D1A3EC389BD83EE4E88353D85D994B25A9E343F133B43FBA30C5
2CA8A503F3FE224D15738C62BBA2C6AD31A0D44B1E9FD3E9E8CFBC32E32A32DA
E19CD9401354E70E1ED37284DDD65E8228E905026C46238C6F9CDB39DD032031
29FBC6B353DA5799579598B01A786024211AB36761C70E58AD2500BD0372EAE8
348C863EDE31E97ADF14D9F180343DA29EB6D49764B29141484BDCE75BEBD9D6
B46ABBBA618BBA0BB81B21C9AE3E8EF86BD5CBD90AAA608A3F65C0FB12D24CD2
86BDA10A436108F0D6B87BFF46E7E197D8541D72B9E70E255A281B2437BBC429
5CCDAA8DE64137227F139DC666BC06F880D67F16B316CBB5CDF1977988257A0A
CAEE781ABC1DDCDBC1B006CFE5A032B95CA40F19FE0EEEAA2ADC08162D9718D2
8BF9E906D959137073313978F2D5E7E701893AA6D9E4B7582ACD74AC46BE3E81
61DEF94EC7C83D65D86376FE392900FA19FEFED037760D1B21CC82451626B5EC
47DDE14A666942B10E15F853CC86DAC167AB448B9CAFFA4BC15B304C7446A71A
59F056B37F038E68455B580A4BBE440839A54B385C9E4571C466AF1B55CC04F6
46FB7704DFDF783B55A6821F7861B12877C5B1CBD6D3328DB47A624C0296A8AC
D7D8A62118514F9B7FBDCC8BB0867DE7CA55C54DB2D6B2CA2FFE02B6E5138C47
FB94BB66248014CCC738BF6E4D58E1E10A9648D4EBEA307F56725A45128EE8ED
27C7E7BA5EA1A04E90C7D88600D2E83D1E720D03106898433420031B98C0E76F
EF91C951381D9B54AE9092381AD48085761D7AC6A2F33FE7BF1189B74F71D864
956D63E797EB97023ECBAC73653FA3F8FF2205525F1BD257B57C0D292469C015
D85942E1C24C48466ADB7CE834363B8150FD58BE2A16804A4997ADFEE6E00F84
F822BF828C4636E80170B3D870EEB5E235C61E8556A2D58B28357C8A57EAE9EF
8D735BFB4715B7E2454D0F598F0BF61BA4085C37E9B93E79D1D9B0E845355120
13C74769E497F5FAD065CAD27B9EB2020C908E91E81B07A92AD544D201D7322C
9156B30A6056497FD3351D7C0F6F281460A76377D15113D005A1B66901FCCBC6
9829663359171CE6F8F94F8270E1C017E33650E24F353E423A9254DC034E6F5F
37A3D8279178B99FD3875BCED31F207E1DB47B8009A96BB72521D78213984E0E
177E9C7360E93C5A09A5977245779264257FFA0AFA05C2842C534A411593D10A
747F88319A809EAE7BCE9A7AB5B1E77B1B8CD7F56186183BB1EF5CD9063DF88E
60ECE319AC80193A8EDB7A58018CE9051284534C1F36D962ABF33DE5A6612AE1
2C94846951749EE3C9A2EE605514EC228BB66A22545962DDACC28AF52ECAEA85
FFD7C022053AB5E774464120A2090199B8A322D4E4B9F225EEF68B8281688882
693085432C07EC72C6FCD6B3EFF627203630AF2BD897DB3C7DD9D71FE2402759
53E222C1AB7FD8AFB2C629CD2B0512E17CC64DA35D43C4A831D03FCB1124534E
05AD6F4C749DF90AF06D25C8878E0AE2CD2CB6A8F5D480878EA65EAFB3C60AE2
36D848BF0FCAB713EDBFE54E4BA5BA08543D85A37CDB16D9BEB4252D67C718C2
A4595075C1818F6A1AA8F9BC84226287AFA57C086503BAC3DBAB76EC3D8BF52C
1ED0608B2273DCF4CB3A1CB631AFA51A23677CF06FBD07C632D409DADF45FD19
3E6EF5F8491B730E6F3509F43D146B66C6AC37133B518FE14EABFFBA280CD826
087D821A0DDCB63267A9A7701DD5EB7677649A26D94F03F5EA9956DD46B5F299
87154433CDDF37C40FBE2DFD467CCC73F5E1E9809CE9BEF643C2568A3365B3C1
540A2FA5E1DB9DDD2FDE4C295151BE1F1C9C1A407E38BAF13CD2B3CC3A3A5AD5
7EAD62A642F7BC52D0064D626BA54AAA0562F00EE394976F0A2F4870DB0C0FCB
EB6D169903ED4724723A954072436EDF60F30CD8AFF952E9BAC603C235A9D7DC
4D9416C47C0CA011F85308F5CE10B99E1B023E824D1B64CCFDC1111183811EC7
8038D8521F88E1E46C231350953FACECFD82FBD821919E3542B33690DA59D859
C51EE7A31E4510F5196DF93DC22D53B21CC59EF5E3DA0AAE2511A0731F4CFBEA
451BD48C15D194B7A0925481FA6EDB08674679A39EC0A7F739BC533CF7684AEA
10F0516B499942E56EFB6139518D822DC063095DB8763961CD892B5DE3777908
625E1A91DDE6077E98045C38450ED9E422045F45A358A7A162679E52850A292A
04B8BAA71A1D06D2FA9ED0B02168B32F6CC0FE765F2AF96425EEE41EAC3D35A3
AAF9348E13F1671DB099C4BA12DEB2C7D2C704581BD389D4C24C460375FF69B3
4D18EFC59636E9C7F8A9A62866F4E857F4EA7D25CC8749B07AD56F952B9069C9
1EF0CDF28573B5A46E82845D720CDEAC7E9079E9EA4FE64EA87FD6E64BBA672C
3E6A26B4F69ABD5228ADF4F9AC7621009AA271E0B41B6C1C6DA424F4E69290A0
78C85A84003435A91198648A941C64D12E8E1451D41BEA93204E6AD3AADA6F24
15A8BCD5C987B17D5F570A966383AA9F7CE59375525369CA6A559BEF0D5763C1
D7512AB6E16FAB0A633BD4BC90EBEBBBAAEA60A61E4B94F0D92A7A8A44160BF7
9651F0E264F81770C69C2A178F33BA78DF24F7346872E84795059D0A12F0E79D
D00A9FB4D7BD59E92911ECD5FC0D9343070BC392C6FF76BA32CC1704A1B7852C
077028B02958F0BAF81A04C5CACCF74BEA322B4845273B067CE1A9B7933BF8AA
212A5A80071AE2173470B43971818878DEB47C542509A9066C03C51A1A194CA7
1FF4DDDF5FB31C974FC3B57BCC10CF0A0F1770DABFA09730FEC742F9287F2792
B92D69DFB3B31F1C72FE37AE784561BFBBFF0182B969C8B466D474E73962888F
4872924DCFEF1D58B9118A1924AD8823E9CEA0F386D14195BEEFB3B9A269A587
593874C38B96EE3094BC95AEE6F1BE238B28F879C77F4A5C066EDD265C940ADD
DBFCAF37BA2500213239F12DC7E00B6615C66879D91DADEAA25F850083BE6CC2
6AE7437664AC6A98EE85B34A9A5F22879FB0BD63A2938F9981B2C52892697497
5F2499F50FA04347CAB53A5AAA7A2C22B671497C9AAE53C60DE5EE3A1E09CE2A
3246B9B5EA106E3D12338EC81D16316F21015487644B55DDA2E1146AA3CE0787
4FD5500C5FD4773525A9E12912D6B2A265DE09B43DD5272067C545347BF5F362
D403F91BA1E5BF9897E0FD98394A944BEBBE20D5795B41C85D883A7B825C2C63
2A45A8A619393CE6696FE4CF5165DCEEFA72DC1B32802595FC8A458C082BE1ED
19871BC4F4EE0CFB5116452A0583C7CDA275AEEF2B2CF35C073278159853E3F9
C4721801295766162B7BA50B9C4156A24084CECDF954E6508FB2866CE2EB3DD8
8426FB22EA87B5F38C119934FFA997C487C43CD58E4190656F7B352E24890560
FD20035A6FB8530E9EF89383C06A6EFE56864309B5EC0B1550029198E9E9F0A8
79549CA69DF4EE05AA2A5F075D57D8FBC08387EF2A58C54D8AB7580EE3ED58AE
B83B72CB902F538B6D5153870BDF50F61ECB986B27E37FD67F41027A5A2F1CEA
6F1F25312B41B125B4A46DA4550DB20C261D39AC844B996C9EC9203DF2ED2DF2
9C2AF195DBC923700981C5F5D55CA10F93D53C35497F93A5550CD9DE284722F8
FCE549F4133677FF06C973F989BB2DC8F8D2F0BC870CA2D0B0D46E0A05899D4D
1DA41A4FE88655F94A91F7A876708AFEAB29E9A7CBE0BC90D0E45B0149324F52
CEEEF248413B9AB45604C2037E471BD24485A77247B614E056C02723505DACC7
92086E18039526155ABFD0D65D612E0AC6E2DE0E5F9094E55F65DD77E8263B96
7745D99494FCFACFE9D03B9851FC8FEEBF287171660B9696015A69BA4A04B118
AF10776110E318873BED624E3B00DB455D1B321583B42DE5E0F9AD77BC7E6B1A
6CFBD3FF8AE2F0786C7F4EF8C2A5A242E84CFD4DC50ADFEA0C2E12FED1CA0C65
0C18287C6E4392ACEE9A1C8FB7FD9390F4072F37B10826AA7F8D15F5A74F536B
4F63EE567921FA7B005AAEDAD9D7CEBA399B3FDFF494D78EEF9EC6AC0826E99F
51EBF66192E45DF1F3899D636D518807D029E0FC354D9874CB4B618C65A2D08E
2F14862E3A62922390E1889F9CA029306E7E1E4568AD6F06729E1FB63B8B3886
CF88A7DD5419F12E32DE866604580CDC0B07E9FAFAA67755F81B3E69FE843FEE
F0899DD0F8C2F957399FAF825FFBEDACBF098A54372F2BC0BE39C9E243742CC5
3B20B2FA8508290E2C6D80A6AE0478021E111AC732FA0120B1877C6951F86EBE
AFE1C5725C894669FF44C8BFA89CF9FBAEAAC3B3A5CC1C9744253567A7830362
372E5EF5212EDE3106862F54A3D148BD88425747EBD84BF01DD06B761A5E4734
0C37814FE1FB817C7C68A5AFCE814BA03EA9F973E3F4E5F1A14EBF827DCA38CB
F9A44C73E3054BC981ADF1AA24A40520A6C06816598772E12C1F54F5186A550F
AC789DC46BAEA1D028891BCE072BC40599E587E8B93EABBD24983CAA7C21FD1E
44B7C3DB34900CFF47462A68A28CAFC810C1F1A3A51DAE21CA6F5EB4FF329646
3F528D5160C7E9F656D93EB214E1FA04F01DC2C6F15BD9566477F456E5395426
72B0D2AF645AAFB04077D440BE21B75A75962A0675857389A433E787DE991A19
617A6DC6D266439974A234EFCD5B6E0E955587621DA810E08997786BA72E91BA
1D2759753E96A327B6C114A5B6872C8C9C6213593ED56FEC6D5E9E8C3F5912BA
4BD3ED625CEF5EDBD37618D207AC9D2AF1C72C5852CBDE88CF595927081BC530
6B48BC1B97A9612FC1D0DEDCE26DD38CD0DB6335FC4A6B27E683A4B83116D297
C76128AA0CF27C1433A5B21C85C42294C5C5DA468B5307F0F0F9155EBDF9AB2A
053F432A3149B7BA168CA488A7C8F2A630D1B50C8AD964B732576A4881AE9CEE
27DEB4026FDD86F859C51A3605626B70FCD6DAA30568C75286BE9EE9B1A2C060
1C57F5B7B1717C456ED996C6B9DE9E1159AFDC804DFBA4D875BCD1C5A160EB35
A8EB174221DAFF096246849EDF70EF99B1C95A296106DE15CF1B4D743634DB5E
B2C1EE447A160AE2CF655A2941F1E48A71BC01CA5CACA1C98CC87E8404F41256
B3DF22C3C0E1650CF2AF1DE1F40487D51DC24E7D4347285682450EBB6D47DA23
67A369A11ED316CF1AC2294E853433340952C7F1E54D5EC0212C697D91FA63D6
E5955CAA4FFE0F06DD5A0C90BFABA39D0F2725E0DBA7C8CE305DE7C1B59DC219
7B35BE60C5CC7E02E8BA2137CAD04FC9B35F0225CE06E6F5F211FB7FC8593B44
6AF4B63916C86B2A9DE768BD8E3A1B5FA03C76B92004AD4FF5E2A0B60B0152DD
E9ED15EB68C155DFFD1BB283F3C5592858EB2D297AA93C055CFCB2813F3E8130
E33961FE59835F21DC12BA218780A5A6A0FAB8F42D90434A48E3F4993DDF5FDF
93C9E21EFE746214FDE117584140381D43F8F39618E4F57281998D97BF97B72A
12C91CBBDB13FF3DE31109B39281A3A2DE349F32AF7261E19E0B78B3EB858A93
2B26CE562FCDB42767D27812497EF6A45BADB374BD1C3CC6D8482BAF155701DE
02B1C3A9A93CF961399ECE1A897788B2B23EF0ECF516B4E2977709EDBD3DB7AE
516C55E742F598B4B9140A5364EF1F6F3A8F40FC28A8F80062CD6C9CA9EF8D5B
4FFDD23B55D05BBAE7F649385C4CDDA9A382634433CBC9D2C6BF444FE9559A1C
D46A71E1847119E030D30776ED4DBD5A2DF213D85A56B1CA85DEA53ED0299C1C
2C1EFB1C157CA626EC056A68B66C652833CDCF08803A5D0344DAA7CD767C726E
7BF288414284CCC3E6FB3DB31EC1858B0891E10C66EF859E5866B19808EBF054
38B9C5A297F739879F1507A6001113B11FCC641D676CD124BBE66287672778A3
BE351E58E961E816262EABE2E3D7E768B8F9BD9F4C10B1CA1196BC062E04A4E5
BDC05841A723BDDD67D0110B8331410F1DCF9E65E7338B42FFA5A5F8CB3945F5
86BFB542B229FECFCD917788FCB6F16EF60D1B1EFE2961140479458987FFE44E
8010F5D4D89FDFEEFB258BF9752463E3291529C0420927FF4C547AA776CD861C
6F7525577AD946263CABBD7656A1F5BF1E103CF93C0DD6CE244DD9B337968A02
FCA01585BABE4E6127C9DC4AD6EF6EE0D15AE4C65321DD0ADB8700E6F49D4494
A93081D9EDC3E6F33C0CBDFA4AAB10EFD2763ECF666139E66CF7D277ABA5AAEA
55AA79008640B603498A3906733A92966C2F11E260A5524656A9A0A0CB214AD8
10A3E22CBBCDCC9538BB8AA51657E0899F1723A90CB01EF65416294CAF223673
F451FC750AAE04876050E92E971F6A42046019E11D040BB87BBB7ECA6D7070EC
6A87416143682C4FE94904E5F5FC71490ADD5CC34BDFDA94B1438B4AEB72DD36
80CDFCE4008A7DC068555E6BFD1F3E8D1F7B13351D44FB1513CBB22AC8F22E33
AAA89275D3947828C6A9675B8FBB5ACFB75A80A168C6AAE8217A7459651CC8DD
6791A341BF41A595EB76C6C567A0539A035AE3749991DEA439FBF139A16A5534
2834F92738BD6BC724446933E8927F3AACE64BE6623CC75E74878FFEAF3702A7
C45E4B09188CFB4AC98BD8AEA47D89D629C49699BE537834825AE7B8A4467748
8AADC68ADAEF0E112CC860A42D5FB50529EA6CE284EDCD95D88ADDF46A74AC94
A09D60E190C548172D2E1D8F21295E6C0563A5EC278081506796D4A5CE91258B
1C760B7B24934B6B4671E42BF7C669EB92D9D974D5E29D6F1DE7DEFD01BE337B
CAEB58D4B2EE599A6F6A9747787AB8FF415A4BBB4AF81F71E37E6A0C5A09FDEC
8D3678C1FE53DDB897B389B6445A99DE978B0D81E4BAA92E8B121A1E1A04E893
2A5E64E2E417C6B64D84B19F7C2D7C143E2878CAF2F210793730C8E519720441
6FD5342DB3EFE5D9826106E5679AAAAC1804C8AB2084CBBB299ED351CDCCFC0A
735927A1468C4192AE8D8799A91A9EB19EA03D4883631BFC7012142611205589
FA4C2263FAF831B150E9615BA43E7E710108A7D53A4021CFFA25B6D7FBB581F1
58E22E137E896DDFEC3016130BE8F3E7C2E2C0DD5267771AA827C9A1EEEAE389
0F6E58D8C19D6F90AFD127A50E098A590E4D63BF187D8A93FE9F8CD6208492E7
A448BF4B4C63CF0C68AC833BAF4B22B26EFC197D4A893A5AEB6EB247627DB6DD
020C5B28A5F5867F1D07E70480CDC1A5036247F8F1C697A6FDA6211191D8856D
A7689FFA345D31BB30841E4EFC9ED1858353AC4063789B6A407EA26388F912AC
640B01F85B3B1CA9C3242781610A7D9AB6519B473F5D5D911F077A97BC333DBF
DF76A4A160238518C50D908A4EE7AFEF5FFA49D59C844204CC485B2C6E795EB0
3850ECDAF201BBABA430326604E56F26766AB54A6BDC7BC2DAA299201D951426
6A731C48B879BAF823745D6D43EF0BA7FDC43804D1B4235D8A4C02D3F7CB6F4A
358631F1AFD8CCF42255F33A0F71F5C59075B9BDCEFC4B659E93BACF45D1A498
4579F501A6AB5BEEBB25F619D67246632A04A14A7EA94BE0AAC62FDEE87E5394
5816B7A1E4B6764A0F87848033CD51F116ED75C3B58C7B93A5357D715FFA30FE
BAC7155B1E4FE28B0DC8DE04B043643319E48BC58438C6183E00F67077D2939F
24A13BE4C74F78384E7FD399CC47BB2F48CA5FDFE743D4CF1A918C5F58DF1D36
4E29610F516FB436F78E4E2174E4CA868698A7B0FF83E348376C235FE8985512
4C58E6471FC04A203EBD502D6C566B04255A82BB27AAF2426421F0093C603BD6
3827E28F17D57CE60091FC5A0371FAF14E7D7542B1B42D692328847E728A6BDD
31F576F64475E62FBF30074B701B39665F4BF41F69D56ED71F2662826D9A1865
668783704E8026D233E705AB5C4F2DDA808D365A7468BFCFBF7E680446F888A9
F1CC3A8642C108D34C4CED6F7DBE80F25D75116BBDADE2A54CBC728EB209FB5A
0BF3C85656D645C92FFDC31E79C6432D4A78712F4606601ACD7D328B95ABEE16
B14337A179D18E171F04F6E164C2CA9F56BC5D4E3E633D60C6EB6CCB0172E299
B1F6353CA60FB57A0FEF4F937EE9FA9C4CD65561E2E5608200B86DDC18C5C81A
4E75F8EEF896582C61017A720161EA2CE5BC374CFFC9EDDE8F98142B0E13F3E6
B825F861467649D10B4872EFC2B256A1C1D84D2CB53F1FA77EA74787017E92DD
E4CA70E9A40308B61A11D9B9DF27ED6A8E4E5C370542ED6B9BD96F7860B5FAD4
2B86273D30CE80C424CB288CBB7155E850CEDC95D7B9804A7F49654F2B9CC5E6
F2006EB0C32DF29D81A0FD4BE5ED75D83C8174AB99A32FB1ADEB641E165EB322
1FE1F3BFE28ADE72E1F7E45D55CA2034552666DFE7D5D94966CBFB46E98286E8
AB5BBCC5A8C431D8D7B220B033126AC26EA984A4660F22D390595911A900FEDD
4D3ABB86A7B1E2DDDCB2BC12801C4A8ECD0B107CB61341CEF6C18B52DF7F950C
E1BDB15548CAD879752198F95BB659F845681D61D02D28B185C9F052844D9A5F
91C6D8AFF0EA14F929D5598F4437AB944A06B5EEC3343EBDBBC872CFA84BDF47
71ABB21235F26ACF6B9807513FD4540AFEE246506B981C4C25D9FB5C08D065EB
272EEEA43D654F888EB2B5E2F8CD8F21B4A6E6FCABA356F58CA4959D605D6577
A03DE99BB78A0AA1139DF5414824E7D98D824B12E020C9DECF71C7CB5B1C295D
E9C0DE56949CA6905DC5CE4093E2F1A817C538EA4F64E96C20699C861C0558A8
3970B2B20819C87E06075DC32A70F10CBCA5201CAFB22E52F8C57F195F6E6524
13F527B2581AA0561DB3F64D6A0AEB2C3DDAB25909FEF00778D7003A85E904DE
41B35C4ED46D104E5A8928286996E80992529537DBE75F0705BE16EE2E8CA3CB
7BD913A9FF9C2E549536B3875FFBEDACBF098A54372F2BC0BE39C9E243742CCA
261A60A772848CD279AFD9FA3FFC6A1B269DF1B24692E01205A76CC4A6F6FABD
063ACE8A01DC45383306CEDF6B1DD84E223D306718D250574E4602EC0964E1E2
8AFA12B688D61276F94706B29796358956C55E2AFF9E1DD0699F84EC735F63CC
8A90417E80E396349CCE3D47F084C95E8971D17B6C14D5B2A021154D274B753A
A96964CC6355528E6E2C07E9AD472351050F942D4323A5ED11D5E0B35A7B1204
741A6C9845338FB9046C95CD41718836E7FF97C27619BB4DE3C72336A0079B6E
8D1359A7450C8F0045D6FBA477667651DABD08368A6487792F13685C59BE24D6
F350C447D7E64A7670BA35F435403F4EDB445B75C893FA3788B37E4CDBA2A5E4
342791D3BB7FB78376B78655F278DC7DE38988C5661E86299C1267B2AC179256
48E0FCA874964C393D4E43107D83CD07880A45EF3A59D1AB95BF8C8DBF57C2A8
AE8354450B6EF848E437B50688FD1B72A4F714CB783DC5D589BBCE42C18EC86F
E2791FA6387A4E1ACBF2A59249A40DA014F6B47B79E9197B49BB995DE8481BF5
77BC17BE663C13833162372FE843423B04BFEBD138588EF5103DF90B7DAAFE39
ABD4C779E1FC59035499DAC276D9DACA74673F9897A0DE47408BF576317D11A1
007B0E8E8ABEAE7A8356DA1ED8DB202FC30256FE361FF7265ACD2AE45430E2DF
A4499094A2BEFE920D6C09EE7D51FE5378A074547878ADDB5E7658E79045B4F8
F5309834FD69392B73C00329A2BD97A8631759792C5455A628C6B99BB29B6279
4CE4AFF4A8CC6A56311513E8AD879777812D6C68FD840C8936DC2A378F50F10B
3F288FAA6176508A79C1D18C9EB135546E055AFCFBBC8533C2A414DDC358E753
C911F4B1A3DCD0A137DF21FAFBA9E8FF83067F15AEABD3386CA97FBACB748809
5CA5EA7F68CC20
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B7A53B71874F4C852622F2334343E5E09A3C0F65BD90C4
5171FBD9BBF8FB484870CC44B96C4816311719E11D1FC81D7F27D41340F9D298
7C798C5447C8BFB3A2C968EF269DA78FA1444210B3B5205B17E51CAFF025CFEE
BCD454B0495D12DDC3B41D526D99AA5755841BA8D28860C3CC71E4E970961F54
C201E4F62781EBF19DB547FBB991AA0CB1A9B056402EBFC64F0A8FE98AD94A97
AEDADF621368DD7980ED85E9BC568943DE1A68599E2F3EF62EA528B388FB2E91
9298D7E8EC3D47A1B7110B8BE409368684A137C14F0D2FE83F60403C598F8E36
0AFD7C3A3F37ED3CB4325FFFBAC2E0F8ACABC6F575CBB58EE2E9E2BC78F89021
0A54F7FEED45331ADA0E610827DAF89EFF382206528161CBC25F1D7566E94134
4CCA69ACBD39877B819434E200FFF0DD0E0604021508FD5108008EEA64913488
5015C2E04D6FDC463C1510C782FD902712B681D4C1FF1A9FD7104F862054F581
7029FFC6A16A25CB7A543B33ADFBBBEC29E29CF2347AA6E8104E110FF47A42D9
23C153F7A83BC1FFE67CD11FF1A762F41A27623712B626E7C8B5F8709BC9CC51
64A737069240139273E37C21EEDB8E24B8E17EFC7D827400E8C7CB2179C42802
5E953E8AF7C9E4428FA690CDA94A29F93BEA641E049A6B6A2C59DDB9EB967AC2
EA971F90A339268479552A5D4F025C0446A986C64DFFC2C34710AB4EA8C71548
510B35FAD5B9844502EBA64388E6A350169601AF4CCD120E7C16E6B195372FAE
48F6AF83863CDCACA331175F46778C3202D3D4F36FE8DA21FA514C6B9EEF4C58
04E7FDFBB5D0A20D24A42DE0C822E7774D2E36B7DC679E91F344E2181C9631F6
90546EC95BD8940EF1700A543708FD91D7ADE548FCAA614BC64F3F70591B8E91
07DAECC5D0D48796C48400D78A4D5A13A5294A43A57869D21A83C2C94DAC7336
75902E57D7C4E06D7DC83F1C557ECF5DE83748365D9D9538E5897256EF93E55E
3119ECA4FAE72F7554F35DC022C87C80B09AA1AB8115B82581629D0C9CECF6C3
D092520DB35768E70336C30AF163EF2E273FC9961C81895DAD7D74B8182DB648
FC01DE11C0F21F62BA38692995EE0690A278917A0BE8BF278B612A84F080DC8B
CB33A871F20ABC9DD9856F0F017B31F3FEC3F71DB2687D13CA64138054D591B1
C7894E2A0D724DE5EB17493F0396CEF43BFA8203807C238B1116F23602649CC3
8DD4B2E9218138D27F49FBA3C2072D491F8FA4DB9FFD25C55A4F377E53B35283
0FA336B8CDA68F28F8C83803992132E16AF8AF6D02B1B53941ADCA8DA610AF85
E4F3CEEE61BD96095821D9B1E85677D4AA2499D32DA8283D0A6916DF317E50DE
C9976448C14D6E26BE56E8D48A62D3F86B78875F838DCF959C9B9F4A686E5E18
2D930A2DC3691654340BE93B8E8301017256FE68958664FD1D7AAD1025FAA420
25B278EFB9A1098CD1D44BAE1D0D3F47FC383F86C8D8E7AA49F0F3BACF583EFB
E1FF3856DF768AFD7C810A2697618581A7E225278BDC2BF0038E66D2C9ECACBB
3BA33CFB4B1B997B5F1221071122721945DE6356BA976B0A931B7E7717A11CC2
51BE93DADCC5FF31D71DA9FE81054610F9A7BBE4D94389941682F0CABD073F23
76E2ECEC09E50151C166892AA2415303D2ABD61EAD6A42AE9B4E66C8E5A03D5F
1D98DE47AB51DD77014C2924C88CFD8E6C388E38A36437B7C085B17C9070C59E
E01D1D635CECB8442177468B4A69E269481F40D0047A7E5A1FEC0452DB032189
B0081F505C6BAE09E9DE083E38E38676AFCDE9AD568319DC6F85E6AF68ED6994
519A7A59226CBC34EC86D2CA91E32214DD857E80C641CEDFB38717C0D90AB406
A2F62CD9027E5A7B4D1670483D668221C3D21B072AA0B8373C97DDBFD7445AF1
58FACBE963052FAC7E5753BBDDBB6FABAB6A8B84CBF6741A5C45AE186A2F9E89
9153F7F2F9E5AB581007DE59F506812770372AEA533706FB1C83E14DFB03A653
D31ACB26D732FD54BD83E3C485032A061769D4E16871A176C150FA8EB3ECF9BB
19DE8A07FF884C9CD6B64EC115F1D1E455CA8C5C8B7674C429EC7A008611D519
276398707B066DA22EB77764E530DE619BC3E2D240805D78448DF7E49A11B2F2
11A64EB78A90B198E793630EF8783BFABF57EE205926A3FC636BA6AF7A624A44
5AEEC02EFF10D47E585D0ADDEC4F95C3ACB5F7A7A204B9909414BC31E37EDE99
58FB4ECA83FC29C8B423687C5E2EA01816ED984B7282BDC153E1A7A510122394
9B0179CF7DE6B550657C91BF3116EE7D152C9E7B202917DFD3124DA727C1064E
9644F4CD107EE98FB2FB022AC985067A0609D61CC9E5A66071A2ED33AB92CA36
C6D06E8D4E51000F60EB69CFE870375A24AAF53671ED0D84110670483EFE13BC
B89E89FA2D97DFA6D5DEEBA86DEB42D52EC3575F8374B2AF8EB408318A12C2C0
9A0F32C2954C689BB04A12A787B4B2AED5544B06AD48DAD5E377C2F375CAD13A
90441275CB00A352AE3DE5D771C66E86F97387D4AE97D6E4E8E06CE9466B313B
6255925F7C908937E3BF94DB3B8AEB59E5E1B9022D2E4700F5F4896B8AFA47B4
043A611A2F1E372A88C843252610FF37D6B41BD2338606B8F4D8EE4C10D079E0
9DD0A803251DC175E7ACB314EA2D6E38C9EE3260EAFD1C1B7E9CAE9EE810B4C7
9A25137E896DDFEC3016130BE8F3E7C2E2C0DD526778CBD0722FFD3218887D32
CE599579BE99EBCC1B00EAF313BCB3E17E0CE57CC25022A23E388B7E2CD22F1A
0FDA3BD897156E72985C4E6BD2E7C6A96DC29BDE68CB227FED7547ED1DA6E352
53BE7A2FFFE59642F96B7F5B766BE0F3D7F6438FA7E464BFF671439E45063CE3
B988E443D762F78EB550A53730ED711AA6107DA8B9A10BC47E59D475EC12451F
7BACA032DDDFC1FCF223628AA5581957F2D88406940F199116B6FFB4B95A485C
5BA1D48A8A22F2FF86AB80143BC0C81D5A73EDB3E8897742B373024638CF93B2
DD6E1BADEC43FBEFAF5889AF55F34ED3FA8CF5756E50E59E42FFFA745190AE81
BB3381FFFC6801FC793F24F175B4395881CCBD1EE8CDAAEBE72E55AB10A4980F
44CC84F8DD351882D80CDA9A1D21DC64FC882372B81445BEDD4CCB91A7A24368
1FDE88C3656A7D9095905AE89E0904AC946EFC2DA5BE15E3200AEF170495FC89
8F22ECC3CBC8498CF1AED0894D645065756B3E3D0005AD729E3C20D66DB734E9
8C3F2737524985AA22FC24BB92A180187245E9624CB60C5FAC2B8DE7532BD19C
FDD69285BF725FB229FAC5B04509F5AECC1EFDCC281D68285BA128E09B840E80
7E6F6E35C9DC49D8173012B6F47A07FF0864F9D3437A03AEB420DC5722694886
3D5402710A02CC77A9841880181CC636B9594EFBA262EB2C414E43D8ACC9CB19
5D12F3B2ADBFAC8A148EE6D3381A60C9EABB784FE719965413E70CB1232D8CD7
B7A6CC203EC601F9A7E2A4395ABA3406503DF86B0D764C6CF527395C123A1C53
29F2EFFA0034DB8E7C897589C1F0806C014F8B9B511C2B3420A7A62D9C9740F6
290E265C8A88331305E67BEEEA9A03950593605F6E803D2514456D6EC34CA66C
04BFA09E8706E8C946805A1BEA23FE2041BE9D41C128CE151FFF0B0DE1AAB069
6F0F7B0817C2AFEA036ABA82B0F948FEF722A5E8E4235D951D247C5A2E208983
DF2BD52684E1125277241AD695DEDCC822B75C8DBB2F8F03639A13E6F3845521
A115EC67E397298427A0A7A59C4ACD748A13881C130EBEAFF4567D31B488B661
F8C45EBD2FB0F0EE1D4A21068FBAD4D77C48E43DDADBFE12AA24BD66895CD2EE
2EC7B233B07456FD4CB9D0E370FC13F87C4AC4EA7673552C992C14563FF9BCC0
B4C20EADE38DD8AA492934045E4EC16AC683EDF570C8EDF0185B123D619284BE
DF7FAE632A025B1105F86A9C9602A5308D897A052CA1F6A18D7C65D557E915C6
FEE8103DA73B5D782BFFAD7F7C029E12E1943C47EA4515043C418049903E3F36
885AD45509FC3CF188D238B270655735B6887D8E063E13C6DE822ABE5DD85124
AB76A214B401F6E1DF2E0F680C6DFCDE0AE9FB824BDA2C386289EBD7CCB63195
82D7B0F7571F47A660686AFC66AFB8F4EE72F16F4A83FD3B6F7C02C8ED058827
BD30B111CA08D0AC4BFA35BD39E31382EB2FA5E5B3FEDF634CB7956956787431
C5F75462EEDBC507DD0FF2EBD9C731D0F06699DA05CFABBCE8EED734C62EDED4
A8F3783D5EB445C3B76095A2FD5BFC3E7A8A2085E55150170D501654D663389C
4B5A8891EC5F847FD143664565A18C2091EB36923F31341B9DF942E732F5332C
61623FADFEFA790C5036965090789D4F09309A682485948E746D1338EBF0AB1F
2B5C97A5E4D6127212AB225F2857D458CD55D90C8CCAC8BFACFCF0E923F2EF64
841BC9B7B1B70C677E94056D90F65DF04CD94D395C28EEA2752448DB9B3F45CD
82E6891224A5614BF4EF1DD2FD31DDEFFC2245555D27BCDC453C01878274BAF1
0530B2AD398A98FCD66DF2315FF8625ADC0F6861B94D712AFC36194FF8031919
096596442CE5B2C145DAE2B6128E6C913C8812CDB537A5987C43E34B7A21AA7D
151A5AE07F30210233859325410D9DCC9FCD627C9341EE5EE7B62160EDBB0798
FEC5FD4CCB61CC8B279A83B37EECE68CE511975D6A69418385124758A2CCBA66
04E8F72BF2316D9271847F1F59BCA560E04852E7DBC79C2DC8561F805C0DA1E1
27282E9881F249F56881B0FCA0E538AED8CCB91FB008F090E93C1A4F592BBD4B
AC64EA917AA5B9A9AA4522C68DA3F2D612B27BF30449DB579D45152EE0223988
AB668C0DE355BF9736395C609B315ACC4F49566EDF37EE3889DE3CECC523548E
1BED287E8F47E7FE27ACC12DD93E953CB9549CD557CF4DE95399C560D65DD1CD
2ECB3FC35A79D216D5DF926C4455FE7FCBE124CB47C28D01A91B690DD9CC1979
414B141B0B14ACEA0C0DDCAED669667EA2AA5D01DE02B1C3A9A93CF961399ECE
1A897788B2B238DB7B809B7735371FE5A2F54624315981DB9E59213A1782142D
F3066AAB60C5346E0446E0EFA5A948531F89C22FBD2DD1B7C4E962FE33D75FFD
F7F4302834506D4708946C7F2CCB70A7565FF6BAEA8C53ACA9C12FA2E904904A
64A382E750152A94A0A0DABC97B4B2A944138C5411D11D0D8C8EB11C4114060F
ADCEFDF326E2FA25F24D7A1B8C0CE749F731509FB6B908695967DE2A007A5F48
9E67259587E2295BD4748871D5A349370AA3F656B45B5E0C15C5BB5DB4DE1CA9
064368A00D89E04C07B80303E27957B69593E0913AED5EA81757E4FB8D9F9761
7B462002E09EB9C2EF7D50C3A6F64C3784717592A22FE5AD2FB11C0411822D61
C461E26D2E83645828EB112AE678F69E62E8CF221B995527DC000AAB577963DF
BC17E9D7D0BE5F69A65EAC76ED7C42F48FC144EE377D810BA7902E8ED910AD17
6295DA5025B24850D06062B5B2DBC288C46688F7C056FA366106E55C70E87C11
358DB2D4F72B51B1D9203F8C21D9CC04E187BE53F8FED4F33633BA03A7248915
577ABD8222985FAED7B6A1CC891D07185666E401F8575732043B774507B75DA4
D49C7FCD52FCAFA6EADEDB31F7AE1F58AE1F5CC02281429B33760498C875EAED
9F96C8184C35804E0E5F0C6B8D2D120C125B8F75C7A85982D0B4A6833BACE8D0
8AE01E5697A89A6045A9715328FF0F2D9CF2B5EECBF408B54C3E0E0F292CC210
EDE38E16FE17A0A07AD7169CF5C854AEAA3FC89F4F0320F3920552337321D82B
49DE32AE60EB35A8EB174221DC5127D90EB3CFD68AD25993B623624CDFDDF117
5E3276C625795E241E6A95AA4017DC05940F32250DC3AC668D80B39D9C2EE4F3
D571285E319A78F909421C31359DDF8E72A110B22AE36B9518755C2FAC2135E8
9AF71192ED39B11BA0C675FAA15E66FE378123944C12592AA78C55E89AEACD5C
CB89BA3C73F2196C7834B1A544B12F937737E20B5ED18939D5E1F82A5D77307D
4A5F24E61DD2C756C43061C3350047FB20E3887F514B5897FDF225685D110824
0D1CCABC97F3829D48F5E78825737DE521197C6CFC711E158D13F55A2A587261
AF1A2D7EB2E0DE91E6B5977EF777EDF5F4B1F0A6DF35BC2A47CC76393F4778C3
17946740BE4BF01A7ACD72330ABC9E413D1DC2AC897D79E01325199C2F208A02
EE453F545DC69D66B1ED93132BDBF622DBC6438DF6625367A51A814A04083917
29345917E5FDB9A55FF38EE51356B2B3C5476FB0F676D52F749E60BB4E038223
B7A6E419ABFC5589937753F78D11AE65DDA53F44B6905704CF35D7BF8C3CB2AF
BE30924368DB1BCD36CFB0020B11D1CCC9186C1571D506413BCA50E62AA9BB96
8DC08B75C0AD9C60730CDB6C87A6D62729A2EF84CE95E719106E59C421D7534E
48C018EF83739954999E7AEBDAC87D5E25B998284A6F868D9A6F9E239DF19198
D5EE9A7DB22D584FC7B6F9C35C47D639FDD4D1DE62AD31814318CCC5B3B79B2D
BB5EA1F2C73A77A324729B603B6CCEC05220CD184DF3A8F645825C9F58CEA37F
13B6B4E693A1D158ED9866DC5BCACA8616749E21E1F91BA5DA79D7AB6BB91A0A
6D6FB96ED1A9AC8C2136BBA0E6DA6D26A37041D7DCB8DA4571C709A9B2FC14EB
C28BCB655AB02646E5BA327D730638DA6B918A38195FC288986BD3673FFAD5EF
6D07968BBB7CC49699FB8FE5D01E6055E2595D792A2E7003639A13E6F3845521
A2C7389C8399AF84FF05A24A5FCF05D552D01A318468CEC42CC75C2244A81801
9BBE81399BAF61865A3684B6E75FA56B4DE542328895A6CCE36F528747ECC774
D5CCF007F49E057B1A71343DACC41CBCDC0E30F2E76DCB77221B44C7B9D8F297
8F16ECCEF7850BB961E933EAF370C41A60A3306EC5B8DFD78A27E926494D5F4D
94DFCE0A75D94B4FE6721018EDDF233229D7D60AFC8B534992629D2EE72DC88E
1F963B7783341D457CA665FCF325A4DDECD6BA35395BD8CB1E8273A55216313C
B926B3E294194D109BB4B6E2491256DBD49728AB2F1555042E52D5BFAD5FEDC0
95EC82A83DB6FE4117618F07A640306AD86444DF766E854DFEC5DBF19D4E977A
07A42287A2DBD42A78E6B71287CC4D31BBC3C5C605452A1D9522D16A67574BE4
D2774161952D462620AFCD9D1A3BE3D924CFD804CF6E653C6C1D3B6F61BEA096
CFB1380FD318AC45D3E7C492360A57DCAB2B635F85832FA320CD9FE204CF2F99
B5E87D108A5969895654C00A5F30A5F801DB45973337183548034A8D5B69C16F
750F4788B6B3C3C2776D4DDE25BAC647136403B67CB88DD20DD1970CA46E058A
2DCC680D2BBC4FE38AF37D16325FB9929DEE8C2848745C4BAC70E4D3A524AD92
6D0C4684879CE4D5C2816F47E2A9560BFB0C4929992114915DDF1AEB1154E4C2
1FCB1072F424756919EC065CD4A60ED52EF88C883E32850E2E1101E780F588A0
61153A631D123B037B74F7F7116D10592A3D4C880674B8B6AAE0E2B20B78F4DE
13882DF23070B9FCEF870EED9EBA6545141F2F7A7307D30727B94E23FDEF3C85
534DC1B358CE61FA4B9A8A2DC1BBD437830EF66B209CF43010B4E9E798609A3D
E88622D29B4BD7FF3FE9B175FF4FB8BE949FCC4B04813776A3451FE65A47D627
AAB66AC6349E6D09199BA12884737714C5FF1616371EBB8E16C2BC75772E05F6
68E491182D78018466DB21FBA0C616CE73F6320E7FBCE9F21123F70792CF315B
AAA2EC0B2FC30FF1DCAE9BF86FD2DC770443807638D11535537FF3CC2582AA9F
AFAB0ED3CE81D63F54FC400D56F0D10FB1C80227D9B633FD5C536A261B9CC6A5
6073FF6D9BF3B9CCE8FA93A71128B87293E690C242ECD53B667FA76CA0AD4CAC
BEB2E1DD7F47029E1579A62B5E34FEFA57A729387C6E48EFC3641A1DC59A816C
933FF5319045F2B1D9C5D34017A12D8C3F1DFD0B90AD438A22F57F95AD70CABD
8E491D8F710C5F31260C5AD761E6DF3CFCFD2D7534D40D1E2F1976A39C4D85EF
BE689724B63245CC0F652022022F51EF63B2D374A4906DCB43730DB05B88301D
C0694534AADB7CA1C907C3EAD979BA7BFDEC44F7514CFC53F55B75BDE37DFBFB
E5DB1BFCC5AD4B2EDB40720EEE7E8463FFF7B0A03F7B5931AB2418F069ED5662
44C3FA4C157F5B8C568B6005F5989022DC463B753D6084BA138014A4F744CA38
97AE5E0C66DE09FE538B20DAEC9AF972C6029233FD26B26081901277A14D6C77
01B3F959A379B03CD2B29D2272D85BAF94486568DBC60297FC48EE3B46B2150D
E67F616FBA22F823AFAC1A9A7CFE331F10079402E2BD9735E61CE48C7E5A10B6
E3F9461761E0B77700680D76C4999A7EB3FB9C5287C3764AE203AA443B35B63B
FA956368397A69D41DD7156C5ED849CD7F809F2EE79138D5B9FDD43B088E0293
273AC148E6C6FF16E37D5951E76363CE7E024B0EB082DF83FDE3D10798189076
CCFC5BD40026EE4F33793041E83EF250DE0FB6230C9B0BD14ED17ED6CBBFEA99
61EA9580E54EF31BA0AA4BDFCD19886D6B2B421F7C057DB10F0445DCD79A618A
339997D35387DBE2CA7CDD580C06A7DCD556D237A1B1EC678BB3B45FBEBD4988
B5ACFD71B15DD33ADEF686055AAA4B08E97B5BD3466C6897065446F7653445CF
6D1A5EEA88F4538F64D0A07E918C7FA684AC0600329C607B76DB29846664EF0B
AAFA416C0AD75613D77A3CE43E27CF3DE10BBEE3496E8934C8F9937D5C85A8CC
5D31202C84A8D63279B3A7D2B900C4373B4F26EBD89C2C9D31A2793E4CFED22C
118E7077B0F6B447185D4BB438DCDDA7F99D160FD908E1475347CB7BDFE93DD7
CB44A6DD2B1951179F99ED4760A5D0E5CBEF406B0A2165722B225A45A4A56C0F
455BAC7DEC85B2478329D0FA4AF8CCBBE14D5782D956B81A51BA5D5B54C41C98
2E78264DACEA638EAF6DAACC47E3A67748F92C1626AF50A79015BDE2A89D40E1
C198F4105CBB10B455C874D6BA384D448EB895A6C184DA71D20B8FF4B96EE6A8
9CDA3211890A4621270788961B6EA7B0451F2BDE50CE5E77164D3419E2033EF0
50978464F9B0B35864F5F460C549FE64DA287F866881471C55B483A27E88AA31
3996E09041489ED8F492150517EDB6E6BF6C16FAB0970B78ABBE391956965D31
BB3CA358B39BCC9632D1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMSans12-Regular
%!PS-AdobeFont-1.0: LMSans12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMSans12-Regular known{/LMSans12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMSans12-Regular)readonly def
/FamilyName(LMSans12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMSans12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-411 -308 1407 1154}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123833081E024C973A102D8F460BD9
75ADEB5A09536D6F3C9E0404C494A7531556EFD108E97E770410E56FEFC620A9
58A40E61E443EA13AB10BA1FFC9A8C5A0AE4B3A70B9DDA35CA4FAC9678E39054
2086BDBD692C89708EFFFA5F235831F7A839BBC56C877DB8F713A2D5393994A8
357B4DD54096FEC1724D57F143398862CA36F1C982DF09539CB8C9F0E7CBE7D2
13233BF5F8C425FABD2185591D3722ABE7F23FDC6700C38136752536882D7EF2
65AF1EBCE3D1D0DA11C2DBD4DE61169AD2010446EE632BF9DF6D929733846462
D10A17CDA1BF70BC1B45EF8BDF72CC5BF96901EE0E7FACDC309AD744B803E28D
170937F444782DBF1A9F10FFCA1E96428C339564080B955D616BB9A3E6C6A801
ADF0609EAF23845FC74ED07C0FD09827EA10884C9B6B900F3FC4C2DAA80823C3
52199CAB38314687E16B2402A698EF5C895BF425ED9B2499D4202D0A8D1216A4
E1187557EB50C8249AF9CC836B1B1D9B4A28CCE970EDAEB57538E662AF941CE0
53D88DB0B078DB739F022E2F92A79F2EB23F089A0E3199C3C2FAE7B93A66DB5C
F10E6763DAC5C342EFFB9104ECD0125C6E7D32D5CE68D11C2014A33EADEA70A8
03A83F22CAB36A7EE9AFD9569661D2B65FB216AB8D1FC7A52F1A471D48B5AA41
16746756E0A8DDE70884DB4D1DC78EFCC745E00B803C7496C6FFC65CAE5FF981
CF760C9E8224BB781DB61934E01B2E9197BB6702E6B1A57C454FA5DE2100267F
912D837CCD9A027E9A7B3BEEEBCC3AF72685CA319212891B6D217650738552E1
048F13CD46B6620DC526A8164D1FE7D9D20EBA6F65CF59CA7A611B1DACB00CFE
42BD5BAAF8E4C6076820DB48DEBAE7E5D36969EDD94FF0050D5F880823A40F9B
6601CF5E16B62AC684179510113589997DE43DAAF37144199ADF6D36E3DD98D5
D4B7A8437E6E7F9B01D636671DF223DB8FE2188D1505B5E82FDAF2671D468141
8E63895C1C7A4273E038B4818CCFD045C605A1F6A18D7C643938408AEC4A8149
3384597D7FB81E42CF4FEE224424AFD19C449E201F2911462509CF872FC95647
95D9ED3174665767C0809544F529188A9CA078C85A8400343529469AF0CB54E5
E9D98BD5B3A869BFBDB5B9834EC15C047FDCB4E0CC99AC20DC2E524F29BC7CDA
C928ACF5E79F0F2B8B671BD37E5E4C42D0BB312C627ED639087BF78F14B0E819
D643B659F742EAF18494A5EC108B439C71C6BE51A9C94D9CF8F08C6EAF9957B6
969602161C8FA3B0A8335A4D3AE1C38CDB5F1A9C5E04DC906ADA5253757383F4
01C518141E6BFEE034E2160F15F3A79225FB98E5732484C6FC1C6C18A76B2B18
2FE2035F15CEACC47B532E2A0CD7BD2B14DB5AFA78F7FBBFD71535FEB7049F20
3B46F9E302E610A41FFF797EE8CB26F5F87D22BC1766A6477587111A62DCC9E0
7F228AD470701B0D6560C44DC616FD82663FE8B623E1EA738390CEFBC818F1F7
70E2089F5034B978482F9041012AD781066C37459250D8608BB3841067A0B618
D05A149DFA46587DA67BA7005F57C269221759F4F1124070141F4CD01914C01D
BBD3B2943217A45DC6A679FDB1CE311BB051D5C727C72CEA56CA484AAE98AF60
C2AEF608A1119AA13FB6FA40C5DC4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A
4AA7DBB7A7E8EA484E2B9BC3B4936126CEA5662629D66B89AB79438F28BD4D27
0F57A959F26997929BD1F8879F207C35F3B014133645FB9F8E53A6E2A1CC08CE
D4D15FD538236560F6A9957E713984D516719A53EBB9C43672546AF3EDE43B35
792D80CE15A6BEF1CE581285AF6F51F6FE41350D1EFC9F8D4F2B7C46FFFCF9F7
347956ACA1339E777504775773E5546629028DCA3202677C5D2E1CB0131081D3
174A8651D858AFD0906D608D62E624BC2288BD1556D40E81A3759E13390EBB4B
EC2821B195C3535CCE79DD39B987048E8FBE3468C1DF29B22F885988C306058E
D73421F9D738DBD7BB88A1AB5E0FD14B7DFB4AE346574ACBE4333E0446D2C19C
39260DF18DDAB0BA5A40946D550B7831A2EE249DBE01CD328B332F06CB1DE98A
A4C60583906515E649B33C06F6E50CD5E02F0313BEEF1080B8E63CC1051A62FD
FF275A0A7A86DDD96474F7F7DD350006200F6AF8AD54ADE5803272A4D0BE6281
1BBE508DC0A95A795590E407C2CA961F03D1762ABC486E717CE9A1DB9D4FB000
8BD647A448A8CE29ECAF881590FA30DD99A1DC6D9AF57EA283EE09BBD61FC4AF
42608C6E01E391C58349BEFFC4449F832807549F2403488CF289787EDE461950
5809407145D7148F40B8FA1D9F0DF623BB5131565720F61FF5AC827C2A085375
313DCF0515C0D52B3DE5380630A194F8DD60AD0138F1A3425B08D7C517035EBE
97F26B0B58973EA9B5E0D111D9EACC98414F7457EB664B2262987249C560A78F
87D3790BFA65C25A312852770DAB7D39E1217619DADD5A529A4EEDBC5404E536
6F675032DB812A9694387BC6A7A0892FF937AE52A6F8BC86AA385DBBAA35E3BC
AEF76093FF3A9D7F90080AB112BB219A800CAFD8D18CC2BCFAE364237B712FB3
FB0A027FC92423C555A7BA87D786CF8B609614131EEA9A4B548A3391C523D03D
761C53FBDCA1E23E47BCF2C96A9C58E53950DB59E4322C1644A36FB4C3A6761D
48BE17ECA852F8AF6C24413395128F43F852E00722DB35B1CEC9ED226397F98E
E776FA224A7914720E92784C5E7013ECA0861430BE508E7727EC1FCE4CCE8C13
70012B655C013DDA26E8CEB937D0E26FE1768E05DB3BC25F19D9565043816BD9
4543DAA8E9420BDA882054B68A169C3E54FF99466A90CD1BB0F246FCF1A109CC
D37C2993F63B6A23D4106DBFB3CAD4DA410E69C542CAC64B65F6B829C08A4C30
9A058BEF688E70AC347A16289031F88B223896EB5330E60F7BD257B07D538155
326C5EE8E3238959CFAB64FC2FD52A7DFDC782E94787CAD9B657C53F1978831A
0E202C3F52D34947E0964D0E8E89F6043C0D2BEA4419F3E20418C7AA4D499D43
A8B60D7A0DB9382C5CD9666700C095207E57106950D839087BE28F05EAFC4F0E
2EBBEC84C9D839CF9231D4DE942B7951DF1BA4E7CF22C48D74DD85E83A3C976F
E83802D4CCD92D05BE8C5822318FF299F6967B7B4020B64FF37AE7FF355357C8
0493B3ABABB91118E4A4D90E41ACF5B18B13D928323EB456715826E5A9D4D7B3
DB46DDF9F633A9644CDDAA91F6F0D7111A44A051887C1A67A03BD63DC896F070
CBB6CD14F14655D8EC1DDB74AD2E75440B4FAD19E6C4BB9B10D61824D760F2B8
63F07B9F43FD9871853057080A9B0776D190746533CB272B577AD0616D09DDA2
A16584C8D40E7F673FBA15097B59ECB9ED4D16EFFBCCFF0CF648981BB0F88EE5
BC55D3E78A9CB5BDFFAE7EC801AABE09A13A368B3C042B5D49A971F125238DE1
4F4F908066D56D63BF341B5D69C1D5C2AADF0E960552D2FE27E75213E3B6D4EF
0F44BE480F257C511C3E84DF1D771582834274C86C80A38B22DA623C9FFBDD1F
916DCBBEFBCA48B9D4EBE52F670153C12D459B6D919E9782026DC6A0BD9BA1C3
981F3B8A7AAE82B7642C9DF1E1024D89E142C8B479309AE973BB998BBBFE4C48
6AD89EAB0D0C2BC5998C5F2D3488996A754FB35623406E03B982B7077BF0F044
76C42C0BCE3308F1E5DF5343790F3E7E6A623DF1DC35098DEA7E69B397DE95D8
1DF8AB287F224100046ABD2F6E793C31EBF5C89965E329D5452E029C481F52AE
787815CBF0CC562674B3264DF5FC0C836DEC8D2C8858E58DD524D173A2E79B98
DB9E6748CA1060D30B9407C3D09FFCAD95A1C64FFBC6312A96D3EB1B3F4AD2FB
7E0DD08759F93F78F34ED841FD5E3B7B6609D033D80A82CC481EAD70AADE0E26
76CAC46C9DFBCA02691CF790EB99F57B180C4BC71579F931A671B2D4832F9D1B
482062EA4F43E2110E483CAB7EEF5BD5A0E98313585FF78E1E9626CE3536948A
E2591E20B7C6D8EC60A3B5480C9045F9998AA0FF1D6E80750263A4B86A2F487B
B059DD7A3BD1CE641C8300C59C0506862DAB8EFE4893B9AF7EC84F69B0C95D4F
B12F46E94F04B8A5A08ADE3960EB9D90AC64F9C82C455E0196EC4B4A1BE90C34
36EC6C1A358168848EA6901ADA93F22670C2F1A54555FFFE67565AB5DF23A717
31265CB8F8ACF15B3DDB06C4D7E65503881361091F0E4F77D9957A24D1CAF943
CCF4A65FEA89CBD68DD7C16D0196707A4BB2D9C437BD3011216F3F8AF6256511
CF4FE9B3F0441B464DEC3EBB1E4EFC65AF3CC8F25525205CD1C2242AE68640A8
C3F7D97DC5E94894E1E63A7D80600B9459B786B406DCB59972FFBC57BBBB493F
2C1B5C38F173A69CE6D9FAE31C48BF614B8334D94920C6ED826DADA497239187
184F081BE4FC920915ADD1CAF234CCEE71ACB2EAD88DEF993163433A376BF9DE
637A5B961EFB3A8DCDC8E33F168DC564A9F80B8C7549D22F30A448F1A2A7AB9A
970A0ACDEDD11FBA0EB4B5FCA60EB6C2BC70DE5DADB205271EEE88240C4AC5FD
A25B65AD51D3F9F90AE53EDE7E845D4664D911B0E64203574E588A6F1143DAF2
5E8102DD35DF255B64B2889C780DC45D78DD134257815004017256FE68958664
FD1D7AAD1025FAA42025B278EAB7D7433B35637CF0AB9DFC59F00E558297BCD6
CD33D47A60746598904F052A50EF84D1C46CFE09C77254D069E4ADD4EAC7FAAB
2B6EAE8EDEEDF2704C327E35FB77CEB7C95330607ED4889DFC82FAFCE87DAFD8
58523953FF9BAB40664679E4B884C970AEFA2A2075A1AB8C2DD0269CADE90527
7DAFB8BC1543CC1E8EB8BDB43518BC2CD4AFB8E3D0DC4C2312EC701C2A55C23A
71E12403A44355854F446DAA42FD34136C4017B3FA8DF19A3A4323DD378A6ABB
FD73E0210C1A54B4468938EB51173E04AA8610F6833A7205A402012BE5E3FE8E
6CC190CAF25D9965CF6D47D6564B0C2F3B595C9F8B8A3106AC80DB85CE6635A9
BCB42AE6E5FCA3C6AD820A8ED4978E6E330DA55D302CAE32268846027A7574E5
04F9F0AFE69BBBE2CE79AB715543773BA334030E5BC5ECBFE09EF6E2AEC4AF0F
E832C4FB773F52696AB85C474D4857CD39C6EB5F485FA98D8A95E7D14DA39CE1
89A1957B94105A98E5ADBF4795A108E6C6E15097A47B1912B97DA3233D0DEF0E
FB5C0D91B2E0D2B8482F6256F64CAE8A227CAB65E8F6DAFF1885F4D4AC55BFB5
37DB4F0890DB1A817C856910A5FE389B1AF013EBCBFF296A975CE47E9527F833
F6BC8861162E5DA27A451C5E2A6986E9DBADC6601CE72DF8F2762BB919644F87
5B203546F396723BA739565A51BCB83CE53A6F20F4CFDCF18A27E32FC0C1E0FB
E416FA1E1DCF959B81115440BA8CAA7FD01A9E4F3A63641E03D2B5D851BEEC46
75F34521611A35FF2E1FB51FBFC7B27C86A5A58A0F460ED7002626A434FDAA22
29EEC078C2116A4D36295BE3F30957A964659C86241FE188A2B151D9D4FBA51E
499C44F82915B1B72102DD4C20619428DEB2182D7A5B4CCD3C28132F7ED5B36C
3AD33E1B31038F25819C130B7BA3AC85E4191290BA5F59BE94B118F6FC73B6C0
B279D81896F3615C3838D79475F488283E17D379F989E79E2A618E3967A7F79A
91616E5D117BBD39746E2C432C2AF2E86D19129855DA91D630F30DF34012DE1F
4C98E20602B36CDF676066901ABE065899ABF96DAF189873BBAD86DE9EB4CEC4
246A6BFAFA2F12135BFF313497CE64AF9477454EEE8AB828EEC69F3D2498503A
F00EAF3AE0B8065557A33187C5709112938ACF9BB2E01187FC035CEA0FD5C118
BBE913923E011284E8FA157E9DE83E8BAD62DB170DFB5192E95913D53D235A93
B70CD71ACB0EFB065D71AA5C0C60DA0196DD4B0E8AEB23739AF92B579720B119
FA9B8D75BB691459DCCCC211E44D10C0CE6B2EEAA9BD1B72B6577CAF6C3C4681
ABA54C4621F05B2BCDC438FD296E41F98992021217D666CAD26486FD8A4E1F40
23DE13C47F1C747A6B5D294CF4D47AC12F1D9282D2DE0F808A40AA3AA415AC88
7257D37EECC71576A752939BD09C743531E2718B446C08CF8E15487FFEA1EBC8
87F047AB4745D44EE33CD2B296D91FAD4848A098ACCA36F24BD9C5D095125DBC
C3489C04F227D170EA0C1E8E021294FBF139D953695CE804B7463204E96F011E
E6CA8DB225952E5E6B752F655D8C91CF08EB5B1222A0043B001FE5C89A5B72CA
2C9D8B35176F3154E8757A1C21857556EE412F4430AFE676E22268D7F0CDA4C1
21A77AF3F5F79161A5AB0AA143FBA1C9F662A35F3BEB5A529B512E85E0C64702
60DEE4BD2E4A16523198B2E05EC8749D3D46AA1886DE24ED212A9B5E86CB221D
BB7DF956A4BE1571615EE88314AE8838EFBDA5D7B525C23E2C78194447371F90
33D1E2B256B88AE676FDC3CD9831BE77B254972132E57E6950455E8E48A68D3B
038886BE265200825E88046F4ECD7F9827CE95E6DCA24FE75E77E289B172AF9B
FBFEAC459A5675B9DF64FDA4CED248E08BFD87A911D1923201D087F30D0BDFE5
F57243AB565E65DC5CD6FFB3B06D23D11857B69DFBEC179B307096031ABD1406
DEC4D2A4D931BD6E5849D43DC9D1545A8D74D8A2F96152638A084EA180F0A1B8
BB3F6165335C2E2D45A67FDA34DE10D9966E67528840E8C30572AD06D6EF7B0E
D471DB941811EEE639A60A32F061B87B6C7379BBF8DF0C3F7F289A4F90AC5535
9D2571426A9D9F41C2C3F1C6B7F475D7C0E6DA1F50788DB113A3E347B57978DB
C344FF1C817A7836AFD1D4A3DC9FADFEF45E209717A157AB0CF1881601EF203D
AF7A9BCEF469E030F44776078DAA51D2E55EE432574C4E0C26166D5A49AD37BC
FC2E5AE335976E04B58E70A5D87BE923FF89D32454D66F1BB52E8328A8A65998
6CA6F554547B0A1212B1CB9033538176952B24F1AE4D3D4F62CDF0491AD6C666
59BAB715BAAAF85F128280E2D8CA957FD535832BFF11FF54BE1ADEEAC0BE35B4
D7972D8852E86C0A7A3AFBFE040101F5F3E2EFCFDF11D52E8906D83CB8A5AB07
85C67806FEB29DA4F21BF93EADB3481D26A908F9AC1C484FB10FD1149384355F
3DB251C33AD5E5C18E3A112F342B108DA6FBFDB214B3134711BCD2A39EB1D0CC
7DA0E98AC508DEC67BED70EBD6ADE595BA5184D3496A07180796B05E1C89F8BF
758BD445EA22179280D4729F23E8541AED00A23BA814323DA321910FE2959FF2
4502548AA33E45BC27D76528CEBA5BB0E57C04B1215028AE5DA5139E8DBFBEBF
F644019D08C6614922520243B64454A8FDE2E58925A0C9440DC034DAD9C195B2
776A7324B7C95A560BD01C155439EB43D1A040652A774AB1E627EEC7FB8DCB92
B7BB4C8AE7AE77C7BF3544EB68B6C09D747B2DDBF2CDA5AA9675662F1D8CE9F9
42559C95A66CC744D9947BC5A800F9DA6B7BAF861C673ED0A004C465F93E9719
ECCC2067B9FFD03692B957A6C40667A5097D8FF96CE8A5C8F9FCE901131D5751
96D497A005108315E38FFF635A3F57C728E8D8020D71C1703AE1E93762684C3B
B8CF107864C3D34C29F89C28469F25FFBBA7E40316FF7A74B59798A8AB7E8D07
D3EBAA99822D6912C77A23C8C3364DAD8E407319772C9B201C49B4C867B84EB2
BC2D37CC885DBD8FCD82704F64753BB3CA60E63CB5661B02C76A1E62E9B4CD26
88FF913D3F49FCA0D100CBE05C9289D4A14E99F1622F25ADA5271ECF6760799E
33319AE8172CC0EDD3FBEE6667EDA6AF0524CAFEC92E4FAE61EA1D3E2DA8EF50
2EF888B7009B1D939156123020D4EA2A4E4D86A1963A3237C7A488381A17E3BC
C55D337817A000ED62612265337EE24775C2952BE03FF993F08C5B690EDF00F3
FE36C9CAA4C56E41279AC7244C47C802D85ECCE0C0F2EFF20DFEC6942E2E9BF9
05FAC428B2A6342E7FD23E1BFE1487D82689119BB8567562DFA4CA7FF78D9066
99CB9C2B43FD2042ABADEB88D993199F8FC68B9043740852B4CCBDD37BF728E5
6482114E807FE9933D1A469A390397432293D3349640BD48E8C525AE262A45F1
B3D83C153C9BA5D98CC8FD4F4FCBB5DE74654682C61FCB9E7659E2B0A319D5E7
7A57BA9C9A17A9F550E672A1A93BB6580D07075A259A9ACECBC542F143D9870D
6E1DD28E26476DD71AFA6C492CC4A8FB5072E2CE3F7250608058EF90ACC54A90
659DD7AF69B2FEC5551A5AB5B114CA693BEB196781C04C0A6EE75D274C9BEA69
9A7F8FFFA8BCBD4D5D0731559C721052784D1342FDE0C8B7CC60EDD2F27E9517
F6DBF60DD648A764BA85A469C15420318F852377C83331457AA47AC07B62202F
F067E51859F4A455482B979DBDE13544B856AD10C3E622BE6775EF2CBED9F505
1110AB2E76BD8CC4C56638104B0EA3612ED810C22F1915008ADA791282032FBD
3210157AB16AE7D69346F94167C60BC6F824D16EBEE9BD9DAFDC335FC4B589DB
92B21ABD5F4A1828236BBC63F2C8CB52AE79C0C7596E61997B1C1F3C19B4A0FD
93542537E0EA3FBEF65ED35C6D8E31D2914E409D64B390B0BB040C68831EA52E
C0C2C4471627FB5F2D03BDF8726BCA03033F73831D36EDC9C25E494030DB3421
C8FEE0E6B34BAEA566ECEB61CF2BF6035B98EA90F559625C437D4FBF809BB14C
7D4FD2C4E6057BE5F5C51A2420027262570D98C6052D73F356FD3F3C3F55166F
C377E829EB5FF5B9BA1AE2FAA8D878652A4CAFD1F9EB162702D1F6805B2D53C9
81C23D2B9D8D0304DB1745BE10587DABF1A685D76AE9F34E4D09B3E7D9717492
5A908E1E9E3FF3FA06862B38D459A241F1D79D4958D052E0B8752B7DA94D3D98
E856C0747CA26E829800CE4AAD98F6CBCDFBD90B6A551D2B0A1601D78E215DEB
FE216BADAD8CF8DF891E50578BA8993679CFF2A83F7C0050DC2F5DED04CEAD7F
C2FEFF3E3F44DF1BA5F724BC963D3825F1111C442A7CF48997F196531080B218
3AEDD09BDD2CBEA2CC1E405654E99C0E92C1FB18CC4B968D70DFD13C6223FAC9
AD3125D6CA15FE185C146C3B2548A3018AAC559F33FC9278A3E1AC6384AEA132
83716F280C3478C8EE4EA63876BB341E2AE2C8B6D05AA6861E3ABED84D6761AC
EDE777F2D3BBFA2D357BBBFB0E12CD481F96252AB7402213DF9BB4477AACDA19
8F13F6752484F5267DF6BBC18AA3D72FE03936C500F42B6AE9A3439F73E47924
A24918A8ECE0DEC951556EC8BFBADBAD045C00A6C3887E0A00795C3712A77E6F
FE1F384F90F1B47DB4276CE06532479E48E7E85EC613DD0B97251C58C2DF3AE4
E1AE41F64D1B5101E7096A27A7B42E2503D6725E71D264033F2369A0D6D4D98F
99551015629711BE7B3BC62F7F0C2F956BA1A8B0EEFAE3ADBF9F892926DFE4B2
0D41DCF37C16376241EC63D79593842B429B1AFB33D68BC88143F92B5D64DA3F
8DBFB5DBA695DE4E68439B79B33FBBD44312EBA9063EA7E422D1219D78BE4FEC
3574D5AE3388DDE9AE21AFE51CCDBC255AA72B207266BD5FE125257C0338F1FC
200262BD57CD45FC323019A45BCA3DE39C3E7618C6322D26460296E91E40D571
A0BDCF87581D59EF8B0F11669B5117EBD2F21A7676678D879ED994F9220B2363
1D60DD4F00451EA5BC7A0102B359B105824C00A57C24E914B8D25BE8F2D77789
C0DC1F4A6B57C9106D3B5B022409B7B1AFF18804604E06B119CA0AA3E4C8A34C
AB0C691B6AC03834F5C19A61D653564D8C789BCBDFC935E0EA158B8AA1AFC1F7
6BF39282D0236E0983786DEAF6699160F88388BE8FD1C64CA97C307FB762C7F2
160A4ABA0C061E850A681F630066630D8595A47913D246893E3D16828335186C
F96C603FA96532FA00F88FCC7A95AB5E44EB877C6A4AAA3F5133233547EEDE16
EAAC1024DFA2E161FB6366C314B13B088A9324093379917DC337D433376EDD4B
44A700F1EF4CA1856F591A0C694A6ECDB6ECF6E7C406ED5CB163934D52A44E36
C743DC3FB1A5F961E79714553ECB496A600029D5FACE40BDF7F9B0714AB9E6E6
55AFE53152F87299638173A4543C6DA77111E903F1534FB37C2F55253DF7EAF1
4ED4DE5B884FA7AF3F075CE9B88F68BB87F3D734E62C1E3E2E2BB873147AE0CC
255E05EB60292648943F4072013D02D833EB5FBAC0C354CE0EC0187F9E6EE6CA
0251C4D90C0B022CCF3A2E4C3054A247134C5176007236EF014B547DB1C64775
3E6CED53E3678CBD257F9BCB5485888E3F74362E408C5F84E3E7781B5811BFA7
4B2157ADDE421D5F51D813B577B8741B68891D673B934B4283C233C8744FD5EC
84144B2966F72FDA23EBDCA7967B2433B6BD77628D7DC92221438E1C15460ACA
F43DA4C509B1150ECBF843C38A4E32C9EEC6B7BDE27A7DBB44B4956AFF8512D7
95E77ACBDE9908C3FD76A7A8A0FE7DC16AC1E93981A46D1C6C13EFF7AF02A722
D0BB7F5048D2036F186F32D75E105B6DA98E8A1B13FE0907E86CCB0172E299B1
F6353CA60FB57A0FEF4F937EE2131ABB8F138F1F254A77EA74602C6D2BD4D780
57167935AA4B2A36FA46AA5CBD3DD8C1CD5E3E5B2E3195AF58DD341F128C794D
9D6EF7E18E83010405CAA3AF558B220C78ED134379E63D9D00667CC3658B3E33
987BE2F53587924739AEE6D7F0F17E613C8EB4385862257D5F9A77E53FDD95A5
54E64ABF5421FD338F17B562E955B4EB29D85F3F611F6CF4B3081A4B4718B84F
74CB7B5F8460E1DABD5857E4B8F9D6695EF332BD3BAA9EE551A4B142DC16BA10
48A6E8A8E59BADAB0DF6C6D023D4D3FE4C3297CD7C6C4E5A68F5DF71FC609F11
AF528652EB3D0DDBD751107BAAB8C78E9ECFDDDE7F42128EAE3004F4689474DE
3B5D25DAA9FF60D639DE068E6459B14ADFA9FA485C755EB39B8C52DE63A06B1B
761F68EE313DAC963DE59D97F6D000A00D9B23BC937C8849B501D18E1198602B
07A036C73A4BCA1399C9CD243FA385624CD4262561683149445AB8D63AE2F4E6
D63AB12AA1143705EC32268B11ED49094445955899DEC98013B1859C373054F3
C9BFCB4C3864D9EE4D3417DD8BA249945228E14A389F0892001B4EB1E463EC54
3B7320DE2F49D8CABD1CC595EC31850763D3E023ECBF4C746EC8E10EE510942B
89ECC58A7096B2093A1BE8DED9C6AA0ED497C1240CF38D94763C1AEFF51D4817
F0FC55A7AA9A1FC57CCC1F55488E6A68CB06390F33495A9C98F1F0FD475AD81C
37384DF40A1EBF3B6ACB6025EAA289BFC1C15E064E8DFD6297D69FF9B3AD38AF
0C6E46B36E805556BDF996C3032C1C39FFE91B7943786A3D62453AB36E6E325A
EDAC9D82657F8ED07C3F4BAB15A656C3F75A0616CCEC0DFAA907B96CC50B34C8
3623F9E09271234506BEF22737891913D14DB366F3BECEB346344DD71E5344F2
DCAE69E08F1BFE2F05C317E60CD8763DCEBCF1F660E8262CD10AA45C67562303
483314B5B66EA79E5BCD82B4DE1097FBA4DE7BD4F60E2FE39295912A5B5AA478
98560ED80F8F7DDFBC965018949FD9BF6301EF8645E1F5AC047A8204F464CF29
A60BA4DEAE3FFD749014DE0E4409134DC478749FF92F0863167264EFAD02E4B4
D24E86C0ACB8FBDA3F0FA3DC2979E7E5A36EB5F3D69C9B2F9CF07D450B0C05DC
94EA274219DDCE0C4D18400A050A960230095553782491A414555572D81B74F7
06D5BFB0418A0E4E57B13B956E26191B12F8E56F07C84C0F825F30D323726526
F7E7C0F5630C31783969C55932DB137FBDB27D25538515CCC676AA7F12D2B1F0
01D6D552E566AB3790E99B7EF281433B85EDBC1833CE95A41B65DEF4A315A960
5BCBD0DF0A37B877C412FAA69741447342C7736BA064D1E19C06F9E6851A64BE
C3F7869EE3181CE8AA1CB8729AAAB69507CD86D2AA045ED87FF2F46373639B85
6B1B5C8F1FF4A2D8F6DC0EE61461658CCC398283744D189736F655B29DA42E27
6863D40E90F260AFF2264557A591997F861A6A9393DF42B32B70D88D91C89EBB
E19A6EC52897E97180263633139AADC872BF6982E79EF8626B5BB0B9D860C39F
B629AB69CD2260364701ECD560C7E1301C609871641736D8B9C714FA8870776E
A5A7897D6DFD21EAD729CDB7B378CEDD34262B37A194EC2BCF68CE7A4C9CDC63
226D68B6DF0E4167A1A8C656DD34B7C1CACEEB8AF6D8424C4DA1EC0B1EDE3DBB
953A8B533BD725CB8008CFA7BC9D0AA6A4DB384B9680B9A338C7584F94E8F669
2560FA70CBA9054BF8C1076F4B8727C16468A2A0F1E49809F1D4342D4F1A3552
0D01D08A09594DDA3D067979B37690120357B4181134CB88476E32DA4D669813
84DC2E6371DE0F80680921B59E05661E646D737485DF144F28B9EA5B4074E54A
BEBF71833640A44CB3B7CCA6DF90DE4241AB498495E14532317E84E6C58ADBBF
215545200135968BA4BC6789D0C503FF09D15B8F8B1A00D1C2DF07895E650EF3
3B95DE0071E3A439D16E5AC10EAA581E6AB0DE87BDB8437FB2BACC6D518A7671
29686A3D22F12830D995534A8D82E4B822F07B115E0EF7D16443DE00ED69C1FA
674BA3664F8BD00C08A27DEC74A72D3E714BAFDE7ABDB99658198ADBC34A135E
DE1AF5898CF7F02CB77DE7D4173F08F020FE6DBE4B43B0BAB5C3134C59FAE8DB
8EFA707B43D3EBA7D9183C5C6C4873B7813C99FA7B6D02CFA938111A092D1DDF
35FB1CAA06FCDA2034A6E5CFAF53CAF1C31EAABE44B4E65AC05F5412C9C3F6C7
F21AC95E4E681A9BAF6A358EC93A7066529CEC7CF2B7AD52EE40319BF9FE809C
13BE788C463B11DDC0FB48077B4425BF9CFD3E5640AAA9635A1EF3F8B48F7577
B514C7361CBA2CAD63DB76728C31B3352A00D1DB809BD0C73EE2780F4950CF5C
E88342AA2D16382072AD62E2E8ECB211C93EA990B3B3C43B7AF86F4EA778B85D
D0C1451610AA956E22BCD5AB67777E28EEF2F78E2D8B838CFCA83A445FA0805A
E960D06C87661AE6FC6516D6719AC9C2257EFE8025A77EE3FD66EDA1201BB6DE
3DCEFF717EAFBAF4EC7B29B058EB744414BCA564BA67811220892D97DA2F0E5B
B1BDD5ABD40D988B018FD6FEDF367C4DDF482B946E7D76B70643D0BA5E147326
8137E291BA3137E9CDEF09C16A2CA4CD735C613B2ED2D1F062531E5C082B4B14
97A21550368EFC7ECA03BFFCF44F61572D9C251C2BA6CCEB12807687701B58C5
F6F8EE56169024ED458E6665998AB7612444953BD111322DEC39D0DD73AE3F26
702733A44EB5B31E921665D7FD59BA1F9102D5A13492C763050D8E3ED64E5B8D
17535FACF364159079C5A72480AE5E7D1459BC80B68DEE67E1667C485FF7D48E
2C2A226BD301A9E912E65D8641FEC89F914D92BC0028C471560340E5A2742E3B
4C2F5CABCAAB77EB67DFC4D3CDD93F07FE282AC4CD971F33557FFF0940B0050C
8EC7F44EC7F76F65581DAADF816779E67B1B36BB4EAC1983C3A27BD7984F2774
A4D2FBF20E45EBA5D846EF69573C5C757A1F16C83DD468F393A6187502C4D904
A26BA22D3EA58670419CEDBF6B348FE702D99EC976714B5FE29DEAEF0BAA4494
524B67F9C0A1788B0A8CEEFF5BC2DDF26FE1A3A965BE40F03646AE3E390D78CD
8656942AC942FADEEB3402972CA343C7CE219F5B93451B21068EEF1FE97A0DCA
472E0CE99EB08EE508DB9D935CEA93ECCD6AFB30E63C52379903A72E36C8A1F3
89F22795970954952DBF1AFC9DDFC00902040350B03219CECFCCA1D3C1D0FE8A
4F802753BFFB51B6DDFCD4F291E0BB1A9D79E829E1B64DE91C306B87ECA28CCD
5790DBCCD67F292584BA2A471906D47C2577DA0299E31548FC7703AD5E1BFE6A
C2F8D5857311A80B42903246B30E960A439F315C4093F4AA8854274B18E98262
AC7CB9682CE60E17947E7E675D19901C7E8272CA05380CDF22BCACAC6B2846EE
200539F53F833F072779927490793784480596E2853A9922271DC7E6EE3F0F61
39CD79863C9E50D108A802E91C5459F5CEFCBA7605B9215FBA3D75F1EFFB112F
0A4D9FC5B6A797EF69C179AF55F513B2BB7E47EA7CF33DB12B22A894F8745D10
026DB125E107FE7B8A181D56098BBF17532C933C63DFD34F564DE7726E2BAFC3
B0048647DD456008945E4D5E3AD81016F32426580533EFFAFF94CE206B0FE726
BAE752A93B45138EEE39C185AF0A90A9F0BC99CAE7B9E1E542F6019419300D36
E748AE0594653E8B6F634F0F5F3965AF7B005FDD4F956FC06001C3EF17044AE2
63A05A625E1AEF51897B93D839B8729EBEF88073E20168E2E404C35FD2BB8622
B91D6BF932A853CFD684DBF7F19487E8C2B17A53D38824803BE21FD28CDDB4DF
465DB9A8B025BBB4963539D6FCEF382799F62A9A8FF8262E8DE16E9245C61CF3
F77D27012BC8768DE3DAF4BFD84C402D527E838E0D674B8B68B947574C1DB283
4483C460A5B2429AD49BD4660B79270362277B0301738DFFC58125250C5C9AFB
B0218A0FD9C249DC1C8E833686E124628956A76633A1337E55E5A63DE7A9C8B7
C56B01E490BCAA831C5027E03D3DB531B56D565BA155D3AFFD5F6BCBAA7685C3
A60204E00DBC6AC34F6745BB9811E2B3FB391B25A73DDC800C45740A543AB3F5
D165D628AF8BF4895EC7EEFBC3160A42630263A36ACF465ED120C5D9C0BF26E8
8D19CD37E3D1881861E2B8856ADBDBF5191C525440A58DF495CD0162C13EE55B
169EDD035E877362B822DA02FCAA50A011D7D48BD7C93BA0ADEEBDAD503879F8
52B1E30DF03CBEF98214DBD2BAA5AE04DE16A0B6C9E3D0B4F7D4860979A0392D
5BB3A2DBE9DEF165A092E9FE22444A69F3FB6ADF2E1D312DE17E85B98E3550C0
A155B294A766220E469CB2F3CBE8585C6830D19D19CB2F97367C7A62FB7E2AA1
6B50DEA57563E4E7D3257AA9DCB5AB1405C5AF76128546E89E3B58A5E519F34D
465E01301A47A8EC2AA57F8C49E984886D61B62C4D0D488CBF10A00AD94FAAD1
CFF3BFEAA81F5D11DD76BADDD8122A4AA123AC6B1D157C6B3945F5898AFA302E
1AC7E7711B193C28D8F3C1DAA7F1FE10CDF6C081F3345BB234239D34279F628C
0CE9A24DE1BE94BB27F83200A3C95728A28EA4493C736C84CCCEAF2ADAE8B2DC
57FCF263BC29268D32853CC4780ECA393564E66DD1D0303C7D21ED1C205AC2D5
7DEAE841450F22D2193965B6D8E67C02BC6A0B64F7A89EB8D386550AE4B31E80
A4676D23FC0E90F03456E1231CFB3CC4E2F9B9790D93B0A8092E176ACFC8C5A4
031DBF1B7A9F81FC6DFC607364D550859170B4CA391D713F3A00A368720687F0
A33C46EC274A77BC37F4CF7C183FA6844ADA69AF378DD50B45FC867C26294EE3
4062E3B392D2CD3154DF717A02A6CC5310ECA24348652BF62276DFED27FA15BC
89BAE715381BF247D955C5D6C8C269359114E9D71A5F93A2575100A33E0287C9
7F91021615427B7572E8028816D4201B9A4B4971ADB498B74F8F86EE5D21DBD3
4B2DCA9BC589990656D0ECA75DFC764023564E8FF99751A1713E00B3BD73F6BE
22FDF794A8AD3B9762348E65610D5CDA5B7C80281E3B8177E30458C0E8F57E41
C25DADA933FB4EF1D23B55D05BBAE7F6091ED6D839091835DD0DF3D13F39AE7F
85E106433891BFA8A1C97A9AF17D04252E524808949B9396134FEC144DE59DEA
125B1DF7C695BC1C7D3B14FC3E7D83EE4EE25AF279829F8D47B702B21359C322
00E796531DE4EB663282065974F633ECE07842F775680FF6AA0A18E74DC148E5
8116C90C7B26C9A63AEABAD4CD2EEF04BA15E3E5D0EE470B9811A0F51022F209
5323D07B0B85927A34AEB7CDCD670DB229D27D7346FB3284186CC6BA6A41105A
F4BE60E0FE5C1E450C607DD17FCDC5BFFCC5CE9C78BFA2B830328F9A6D40F4FD
A0D5387124656831862FF01CCB867F027E95F0C17BA269968073AD979877DCDA
412F63573818F678B2462D1F557EE7668528DB216195143E8CF31C5D103CA1E6
6DF045B96564E24F38960B7FF5045171A83792D58E7A411B6EC0005D6C642113
8BAE31C3A556AACB8FE5951B3C0295BF0E6E0D89924C0B20C987DA00804339D1
0E41F78ABAF2A6FF6B33BD3E063943C4FFE3B9ECF77AA66E3EEB917AD0A0C738
185A229C196660C1E7EF7566232A6E513C7453D17EE21BE265B3F084394E9876
00DD4D04CC5246DA7AA16DAD7A3EAE2BAB756E32E5C129BFF10F485B8221483C
2AD47B0ACA1D53EDBF98BE634FD17B2A2F4306AC9C0E2C687D1D9ACBDDB1364C
164319055DF4B81282E0782EDD5F5B3232943D19F69362DCCC00076D10EBBBB7
36B4839D762ACF3202B7A49D6AE8B8362A5765A066D1B80F900D1605E541055F
9D978D94AAB050FC6FA033DE0E67D120F3F6CDEC792FA518E6C6FB7F8644983D
69FCC435D7522163B2871DDB76497570C90861F3ECFEF9CBE5D25F8D2B1B99B7
3FFECCAF7C7531842B95B7A113C09C6FA49C6B89291598B9D1A2777ACAD657DF
7147FA930222F26EA053BE90F93C5B50BEBCAC44621F6D7F05493EA63C44B727
AF545A3BED91B8BB33418E2837B6348EA538E513B26906E9E6BC229D511F324E
32956171156996DD709A239A40BEBAF05CA22C94624084DA48124054897D1350
99730258CA9A81C32AFF1C70A71E7CD7D9933C7D8509761DD95AC5C515A28FDA
AB8DC3DACDCC009ED4E8D2632E39C9823949070C15CE41D36A664391B7B84E22
80E4DDD137F87752CA18F8147E983175FA450580110EA53B4D01AF33637D1954
7C8D92E24C1190A50E8DCED4C0D5D953C8ED0FEF53FFB91E213252C58D39514E
9BF54F298B4C0974C5EF103E8B871C72619E1925054A3840B988579060D2BFEE
F8BFD513B0380993B8D52A6546D6915953B336C6A17C42787F97BF93CD6E0DDE
7BF692895BD7C68B35CB48DA6611E0ED9D102FC5598792E6234F8AACD8E44558
05FD5CCE647F990EC29436C60A8C9DCE540D9BA6FFA0C2AEBFAC9216FB646FAC
C2ACCF7936399849069F2EB3B549BB128053BC57B5D0FCFEA111740080E048DA
4F15A736793F0C6BEED9FCD9CF230F4B05040F43F8B4BA15AD718CC5E605CD6C
3C5A46E851536CDDCDEC21CA8F6908BFBCD4CB3919066DCED026639574689104
5D4B3F5BD9EE970A2FA1D9D3707D84206A483AC63A2836CD35777CD3B07F91ED
AC559A220F29084DD86CD920BE409CC94D3224E75B5764B9DFAA97EA454B7FA5
E6397638A4164B91CBA8363E448B71F9FBEB52E57A535439FC940714204D06B4
D6749FC4B0B5C900A42D124B6B65AC3D1B827919FFE46292E803045FC7D7ED27
129CEC39C58490F7C5C62DF833DB9BF71445C13667865BD392E08A3C4D931CF5
7774E70909CBA2A8CCAA351D75182E471F18B7A460A2DE4498F25A81DEC9360C
B9AD881529A96576B0EBFF4AD9F19B4C11FB42E6A907DAD9027183B2E7D91564
F0AC54D70F8EFC63B94F73ACBB4CD27974F2FD1838DB34A0F6F874E8BB47973D
8D20D8581276076AEC28B61E667F4E8AB8DB64EF08CB2EAAFED53C1E1C3D402E
C0166803871ADEE2CB17531576B0C51DBC7C77212B4D4D5A6E66BAE16BA7764D
8D8582DFD200384EC39B07A697AF52D0FD3F35390405D6A9D16C8682CED4753A
738E5DE5E7FF04454A49B719BAC88C6284076BD9BFED83F6E298C4F428617BAD
EE752997B94093316F7599636730E1543C91903100B8AE9369DCEC61F491A3E6
D813460531279ADEFE783DC387F6A8EFCCD8AE365C97E40A7088D2CA80E5A673
CD363DC1575AD934C4511638CEC4FE40579BEE2F1E3CE6C907B94D63283D7AFC
A6D3D5D9F01C5E6B4441A41ADF3961D7FD5E439843D2BE6EBD50D19DF9243C4E
6488D2D3CC9C266FD12E129320B519DC1FA366ED709A0C2579ECFBCFB7E7721E
07C9503B4A5D4BBA235FA3583B90014BFC873241224A8B18DAB2345A313A6819
F959EE20C356B257165197946A19E5C7BBF17E85B0C1A6D5250933CAFBC2CBC7
07BB968B61EEE56172D75C8A0D05AD493E6BAB4100D265D42EBDD432F59BEB49
91C8545446D1AB97E5A1AA8DDDEC792C2392B4909CA173E4B6F3271396CB9B90
CE73A3467090058FD6AB5896A1B0ED2BA5E4D5BA20DBDDBB8359030780CCEE9D
2389B469CE5593207C521F9CD08ADE0BC698529167C523F1477A18C5FA931ACA
E31CE6B70C0C19FF70E8B07EDD800F7362CFA24BB2F3D4EF7D39E1902C53053C
251CF6EB29A3AA9FC93F8B84C3460DA911CBB3BD57F50C34F7B0E7A983AF06FC
F09E37E9D83826C781804806823157D992F2ECFBEC965700730C46F4B358C289
0599A5AA280A5C9A1C1B39778132988F62AF56BB1C140022F01E174289A675DF
E39DF546A3BFF3244C90733BA17E434AD5D30DC18FD7A0C09F19E9C0302071E5
98DDE8D626185E08CE84F249A1078F5584B2FCB41823CD2AD46274399695D080
DF8A78969FF3C08562DE4012BAEF33DC7796EBA49DF107A7F4743E37FF5A790E
D6B92B62F165187DF50FFEA970858E80ADA63052023889668F4C3E84535EA2FF
86846BA1B1B2BFE36AF9E311D31CB4D124C5AA2DC36A4A31A1095FA1135CB7CC
6EE6BDFE554D9A297F4A7442209AD8BFDAE064992A2C14B13F18D8048B24F8DB
94FEC178B948104127A22B60F093223A64804E46E6C216175778EACAA24805B0
C79243DA91D2701CB7A4AE823900318F45CBE1BB1A6E0CCF1CD79182D3B235B4
506BE533DB616CEAC8A30C01B3F334563409EF49D7C19CF30732C014E7CC2441
89592FB944D403458FF43F071DFE3DED82FF3AD805AA74F65566957680618C92
3BABB4A0FFE6C5742D4AC7AB941BB9B797E98B0BDD9F99F78675BD9C093CF2C2
22DDCB85D19E179DE6EEE684BE3A7AAD44B39E0F40D59D152BB1F5E716D30A56
46F6E4A7190BAB37A8D78C8996A34FE405AD6C94D34A2D6E71457C0587224B0B
A4B135CC8709B34137EBE447A68F1A9E89C9DE81C0486C57E52DD412FB66F406
10C2299F6C600331BDA3FDDE1DA1C862C9BDC3A2B152842BF8FE45235AE7389D
4AAD46370C76C3162444F3AA3672C66C81B3B13AA2F94139EDB251936AA43D02
F839DD161168565E045F647B9815E5C1D06AF1859F45140A382AD6E699337244
DF953444B29D7CB004560D0685F73E8772FDDAB8757C6577C070216FCDA30F57
23F772B1764D9E2C9CD6BE6E0ADD9830B8CDC1E183BBCFBB2C11CDEDF020EE04
65C61D86033F16F94BC18DC911270C7B4E1ACEB5EC9B197B9F903806F30AF375
22828FD5DE3EC220C719B63A943B8C58418AEC18D647A6DA9DBCF5A10C5007AD
BE32E244197AB16AE7D69346F94167C60BC6F824D16EBEE9BA70B0D0FF6FA73D
9595C826F333231AA99F9D731A3BA287949991F8DAC13FEAF57217EC77A948BE
B1CD55367319AAA648FC7CC2E278F418DDADE2D0DA4983A7E8799479C0B57A20
F48340F7D727272E4D9457D8C2A1E937B47C40271A24FFBC511CAB6DABDC2EC9
F4D778E7384A27AE6A8DDFE9AA04AB2C81845DE64C387F3AE3EA8386A9CB5709
C9DA787491B0486E7CA427857946D2F3D0E22E018CF12F5D86D254165ADC4C98
0F349927924B24C11120970122E0315FA375742A1B2D26366796627D7A18371F
4B613C2115F35697E1E5A8B467F6A0977BF8BF827381B960459196BA40FD2B9F
E2CE494C712C51556C68D920710447158D81716368E01D9130D3010FCB203D50
D9D28E441ABD554AC10B712825A46A68EB78AA3D2C058488C29EE305CCC9A305
ECC299FBD9A74AC0CD41EFED2D2CC5A3137DA5C4DB0F7DD846549BAEB5398778
7AC9AF72F866C3CF56ED4B3C59B2A879FE85E298C8D2785749531EAD8FE250E5
3670DC10DC0AF2EE31FB98AC2A5B9D35C8EA73BFDA51C5CE5335AE220FE68A7B
6BAAB1E8DC334B40519FDC326FB44EB81C69A18DEBB469D40D39A721951E35DE
574A9C204D06CED78BECF34BFCF41D02C7EE7619C5BA69177FE94D14189B85DF
EF3367BEBCD43241ECCCF512FC14D9AC7341D5046C96E98C17C37FF5841072E0
10A6E4FF24EBEB2BE5F48207C4F9F63C4253C69F1FEF4419A6A18C8B8F25C505
F2EA29120E4FD48FA46E71E97F0A8DCFDD26F25590CEC8C64834FCCD3AF3A93D
CEDE77E6B768F35E7566E858B2CC4E9DD3BFC761495504824679DE74EF934E02
7649AC2EBE9AD41E8CE89D34F1C27418D617316E055603783278C6ECB538B1BF
021F629710B00519C5E08EC814344ACA7C7B7E6429C9E39FE74C12478382C897
0F2576A3FC5A51F91CF5CAF103EF0B99E52A5CEEFEA86B86798419602EFFF9F4
AD3BCE77F9B4539ECECE18D01D85EA1422B24FD872D6E8A41A82CDB7A39CBBE3
E75DA083A0E37468C1219806B3BC5331CBF13F534DDA1DA88ACC37C666868E35
340A0A4057D01128E8CC51F0BE5A6A93B25202A01894C4580E26798874EFE17B
02B2C5EE334BF368DF18FF443410A8EF469AEFCEECAA1896A3E64A961C583F03
41C770689AC642EE9A23816A15781E984FF2CFD2CC7B0A282BA274F40C9ADCE9
16DCF7863D5BA0C868F805585A51ACCC3EFE991429C20707BE3ED868C87BD5E8
70BB1A6FD35BADEDA13B3FABAB0E20112FF607D3A30B229923F5D5E54D4A21F5
E6D8E78641CA9A705273062E68923977210974E048CB7C9F496F0E5EBC7192AB
3401CFE6A3434D285BF0FDA8F050E23DD438FD73F6FB98801456F8445A2C7AA1
9869F24660AA772579B2DADDD6F5792893B452816192FDC75B901E614F734893
A882ADEDE774DB44D5D93C423329A245521FF9BAEE40CD9FAA42C18D5F5486A8
C75C6C2F90329DD504CAD8389E20EACCD3FC84308A565A55BE44EC10CC475572
C2DCA1039DC3DFB81E2B75D71B19EE9FF851479A8F79CFF6A5D51DBB4E6D2BE7
DBEE039DB9499ABED4C33668C231EFE3B86274D7EF345FBCEE8CF52EECFD5C19
2FF1022475A7F62D772FB4DFD9228E1A27579639623435C109B09D088DCD4330
2C3833D06C9F8322CE0099BE78AA161CABEF14DB9ED8BCA6AC6A70BB4B1B3014
AEF87ECF441D2593F29D6DAE240C096EA124FDA52EC9CE773A3E0C083AD5490D
641704D4224BE56313060C91F6F6A6D2C9A42EE4BE5C7EDB850ED7BDC2E57C42
A7A593493DBD5DDA2CDEA4758CCAD7F028CF1EF331D00503382C234F8BE9E9BE
46481D4436D2890802468539377FB38EE709377B0E71CF3F0D0600988F42695A
481D3C73C8AB83A6BA9EB32D5C3D359E12EA325E56BCCD860B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 8000 8000
(Calculating-Gamma-autopp.dvi)
@start /Fa 203[470 470 470 470 49[{ enclmrm ReEncodeFont }4
885.568 /LMRoman8-Regular rf /Fb 169[975 86[{ enclmrm ReEncodeFont }1
1328.35 /LMRoman12-Regular rf /Fc 139[470 499 442 1[667
1[667 1029 306 4[650 397 578 1[578 1[623 13[723 2[827
80[{ enclmec ReEncodeFont }14 1328.35 /LMSans12-Regular
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop
-39321600 -39321600 39321600 39321600 6446612 0 9998827
 0 0 a
 /PSfrag where{pop(v1)[[0(cc)1 0]](v2)[[1(cc)1 0]](v3)[[2(cc)1 0]](v4)[[3(cc)1
0]]4 0 -1/Begin PSfrag}{userdict /PSfrag{pop}put}ifelse
 0 0 a @beginspecial 36 @llx
36 @lly 188 @urx 134 @ury 1520 @rwi @setspecial
%%BeginDocument: abc.ps
%!PS-Adobe-3.0
%%Creator: graphviz version 2.44.1 (0)
%%Title: abc
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
save
%%BeginProlog
/DotDict 200 dict def
DotDict begin

/setupLatin1 {
mark
/EncodingVector 256 array def
 EncodingVector 0

ISOLatin1Encoding 0 255 getinterval putinterval
EncodingVector 45 /hyphen put

% Set up ISO Latin 1 character encoding
/starnetISO {
        dup dup findfont dup length dict begin
        { 1 index /FID ne { def }{ pop pop } ifelse
        } forall
        /Encoding EncodingVector def
        currentdict end definefont
} def
/Times-Roman starnetISO def
/Times-Italic starnetISO def
/Times-Bold starnetISO def
/Times-BoldItalic starnetISO def
/Helvetica starnetISO def
/Helvetica-Oblique starnetISO def
/Helvetica-Bold starnetISO def
/Helvetica-BoldOblique starnetISO def
/Courier starnetISO def
/Courier-Oblique starnetISO def
/Courier-Bold starnetISO def
/Courier-BoldOblique starnetISO def
cleartomark
} bind def

%%BeginResource: procset graphviz 0 0
/coord-font-family /Times-Roman def
/default-font-family /Times-Roman def
/coordfont coord-font-family findfont 8 scalefont def

/InvScaleFactor 1.0 def
/set_scale {
       dup 1 exch div /InvScaleFactor exch def
       scale
} bind def

% styles
/solid { [] 0 setdash } bind def
/dashed { [9 InvScaleFactor mul dup ] 0 setdash } bind def
/dotted { [1 InvScaleFactor mul 6 InvScaleFactor mul] 0 setdash } bind def
/invis {/fill {newpath} def /stroke {newpath} def /show {pop newpath} def} bind def
/bold { 2 setlinewidth } bind def
/filled { } bind def
/unfilled { } bind def
/rounded { } bind def
/diagonals { } bind def
/tapered { } bind def

% hooks for setting color 
/nodecolor { sethsbcolor } bind def
/edgecolor { sethsbcolor } bind def
/graphcolor { sethsbcolor } bind def
/nopcolor {pop pop pop} bind def

/beginpage {	% i j npages
	/npages exch def
	/j exch def
	/i exch def
	/str 10 string def
	npages 1 gt {
		gsave
			coordfont setfont
			0 0 moveto
			(\() show i str cvs show (,) show j str cvs show (\)) show
		grestore
	} if
} bind def

/set_font {
	findfont exch
	scalefont setfont
} def

% draw text fitted to its expected width
/alignedtext {			% width text
	/text exch def
	/width exch def
	gsave
		width 0 gt {
			[] 0 setdash
			text stringwidth pop width exch sub text length div 0 text ashow
		} if
	grestore
} def

/boxprim {				% xcorner ycorner xsize ysize
		4 2 roll
		moveto
		2 copy
		exch 0 rlineto
		0 exch rlineto
		pop neg 0 rlineto
		closepath
} bind def

/ellipse_path {
	/ry exch def
	/rx exch def
	/y exch def
	/x exch def
	matrix currentmatrix
	newpath
	x y translate
	rx ry scale
	0 0 1 0 360 arc
	setmatrix
} bind def

/endpage { showpage } bind def
/showpage { } def

/layercolorseq
	[	% layer color sequence - darkest to lightest
		[0 0 0]
		[.2 .8 .8]
		[.4 .8 .8]
		[.6 .8 .8]
		[.8 .8 .8]
	]
def

/layerlen layercolorseq length def

/setlayer {/maxlayer exch def /curlayer exch def
	layercolorseq curlayer 1 sub layerlen mod get
	aload pop sethsbcolor
	/nodecolor {nopcolor} def
	/edgecolor {nopcolor} def
	/graphcolor {nopcolor} def
} bind def

/onlayer { curlayer ne {invis} if } def

/onlayers {
	/myupper exch def
	/mylower exch def
	curlayer mylower lt
	curlayer myupper gt
	or
	{invis} if
} def

/curlayer 0 def

%%EndResource
%%EndProlog
%%BeginSetup
14 default-font-family set_font
% /arrowlength 10 def
% /arrowwidth 5 def

% make sure pdfmark is harmless for PS-interpreters other than Distiller
/pdfmark where {pop} {userdict /pdfmark /cleartomark load put} ifelse
% make '<<' and '>>' safe on PS Level 1 devices
/languagelevel where {pop languagelevel}{1} ifelse
2 lt {
    userdict (<<) cvn ([) cvn load put
    userdict (>>) cvn ([) cvn load put
} if

%%EndSetup
setupLatin1
%%Page: 1 1
%%PageBoundingBox: 36 36 188 134
%%PageOrientation: Portrait
0 0 1 beginpage
gsave
36 36 152 98 boxprim clip newpath
1 1 set_scale 0 rotate 40 40 translate
% v1
gsave
1 setlinewidth
0 0 0 nodecolor
27 18 27 18 ellipse_path stroke
0 0 0 nodecolor
14 /Times-Roman set_font
18 14.3 moveto 18 (v1) alignedtext
grestore
% v2
gsave
1 setlinewidth
0 0 0 nodecolor
117 18 27 18 ellipse_path stroke
0 0 0 nodecolor
14 /Times-Roman set_font
108 14.3 moveto 18 (v2) alignedtext
grestore
% v1->v2
gsave
1 setlinewidth
0 0 0 edgecolor
newpath 54.4029 18 moveto
62.3932 18 71.3106 18 79.8241 18 curveto
stroke
0 0 0 edgecolor
newpath 79.919 21.5001 moveto
89.919 18 lineto
79.919 14.5001 lineto
closepath fill
1 setlinewidth
solid
0 0 0 edgecolor
newpath 79.919 21.5001 moveto
89.919 18 lineto
79.919 14.5001 lineto
closepath stroke
grestore
% v3
gsave
1 setlinewidth
0 0 0 nodecolor
27 72 27 18 ellipse_path stroke
0 0 0 nodecolor
14 /Times-Roman set_font
18 68.3 moveto 18 (v3) alignedtext
grestore
% v4
gsave
1 setlinewidth
0 0 0 nodecolor
117 72 27 18 ellipse_path stroke
0 0 0 nodecolor
14 /Times-Roman set_font
108 68.3 moveto 18 (v4) alignedtext
grestore
% v3->v4
gsave
1 setlinewidth
0 0 0 edgecolor
newpath 54.4029 72 moveto
62.3932 72 71.3106 72 79.8241 72 curveto
stroke
0 0 0 edgecolor
newpath 79.919 75.5001 moveto
89.919 72 lineto
79.919 68.5001 lineto
closepath fill
1 setlinewidth
solid
0 0 0 edgecolor
newpath 79.919 75.5001 moveto
89.919 72 lineto
79.919 68.5001 lineto
closepath stroke
grestore
endpage
showpage
grestore
%%PageTrailer
%%EndPage: 1
%%Trailer
%%Pages: 1
%%BoundingBox: 36 36 188 134
end
restore
%%EOF

%%EndDocument
 @endspecial 0 0 a
 /End PSfrag
 0 0 a 0 -7822 a
 /Hide PSfrag
 0 -7822 a -11110 -6900
a Fc(PSfrag)434 b(replacements)p -11110 -6465 11110 45
v 0 -6420 a
 /Unhide PSfrag
 0 -6420 a -750 -5379 a
  {
 -750 -5379 a 0 TeXcolorgray
-1500 -5015 a Fb(V)-525 -4816 y Fa(1)p Black -750 -5379
a
  } 0/Place PSfrag
 -750 -5379 a -750 -3774 a
  {
 -750 -3774 a 0 TeXcolorgray
-1500 -3409 a Fb(V)-525 -3210 y Fa(2)p Black -750 -3774
a
  } 1/Place PSfrag
 -750 -3774 a -750 -2169 a
  {
 -750 -2169 a 0 TeXcolorgray
-1500 -1804 a Fb(V)-525 -1605 y Fa(3)p Black -750 -2169
a
  } 2/Place PSfrag
 -750 -2169 a -750 -564 a
  {
 -750 -564 a 0 TeXcolorgray
-1500 -199 a Fb(V)-525 0 y Fa(4)p Black -750 -564 a
  } 3/Place PSfrag
 -750
-564 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
